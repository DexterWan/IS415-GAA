---
title: "Take-Home Exercise 2"
author: "Dexter Wan"
date: "September 25, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## Background

East and Southeast Asia has been historically known for its issues regarding drugs, especially with regards to opium and its conversion into heroin (Peck, 2024). It is also known as one of the largest methamphetamine markets in the world (UNODC, 2022). This is particularly well known in Thailand, and in especially around the "Golden Triangle", the area where Laos, Myanmar and Thailand all share borders with each other. As Matthew Campbell said in a [youtube video for Bloomberg](https://youtu.be/MO29RHhlS6g?si=hb8TiNrGQPMXQWSI&t=188), "If you do want to get large quantities of drugs out of Southeast Asia, you do often have to go through Thailand. It is the most internationally connected of the countries in mainland Southeast Asia."

We will be diving into the records of drug cases of all kinds within Thailand from 2017 to 2022. We want to see if there are any correlations between the location of hot and cold provinces within Thailand and their neighbours, and spot trends on how drug cases are distributed across Thailand.

## **The Data**

For the purpose of this assignment, I have taken the compiled list of drug offences from 2017-2022 Thailand at Kaggle: [Thailand Drug Offenses \[2017-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022), and the boundary data from [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?).

## Importing Packages and Data

Before we start, we need to import the data and ensure we modify it as needed. Firstly, we start of by loading in the relevant packages that will be needed.

```{r}
pacman::p_load(sf, tidyverse, sfdep, tmap,spdep)
```

Now, we can load in our data. Let's start with the boundary data of Thailand.

```{r}
#| eval: false
thailand_sf = st_read(dsn = "data/raw/thailand_shapefiles", 
                      layer = "tha_admbnda_adm1_rtsd_20220121") 
st_crs(thailand_sf)
```

As we can see, the boundary data is projected to the standard WGS 84 coordinates. Let us transform it into a suitable crs for Thailand.

```{r}
#| eval: false
st_transform(thailand_sf, crs = 32647)
```

Now let's import our drug offences data.

```{r}
#| eval: false
drug_offences = read.csv("data/raw/thai_drug_offenses_2017_2022.csv")
```

As there are many types of data, I want to preserve the data while at the same time just consolidating the number of cases by the **province** and **year**.

```{r}
#| eval: false
drug_offences = drug_offences %>%
  pivot_wider(names_from = types_of_drug_offenses, values_from = no_cases) %>%
  mutate(`Total` = rowSums(.[4:19]), .before = 1)
```

The *pivot_wider()* will transform different rows with the same province and year into a single row, shifting the different types of cases into columns instead. The *mutate() and rowSums()* will then sum up the different cases and compile it into one figure, creating a new row for it.

Now lets join the data. I have decided to perform a join using the Thai name of each province in case of potential translation errors. I also filter out unnecessary columns.

```{r}
#| eval: false
thailand_drug_offences_sf = left_join(thailand_sf, 
                                      drug_offences, 
                                      by = c("ADM1_TH"= "province_th")) %>% 
  dplyr::select(1:3, 17:36)
```

Now I shall split them up into their respective years.

```{r}
#| eval: false
offences2017 = thailand_drug_offences_sf %>% filter(fiscal_year == "2017")
offences2018 = thailand_drug_offences_sf %>% filter(fiscal_year == "2018")
offences2019 = thailand_drug_offences_sf %>% filter(fiscal_year == "2019")
offences2020 = thailand_drug_offences_sf %>% filter(fiscal_year == "2020")
offences2021 = thailand_drug_offences_sf %>% filter(fiscal_year == "2021")
offences2022 = thailand_drug_offences_sf %>% filter(fiscal_year == "2022")
```

Now lets save our data into rds files and read them again, such that we will not need to re-import and modify the data. I have included "#\| eval: false" in the code chunks above and in the code chunk below that writes the rds files.

```{r}
#| eval: false
write_rds(thailand_sf, "data/rds/thailand_sf.rds")
write_rds(drug_offences, "data/rds/drug_offences.rds")
write_rds(offences2017, "data/rds/drug_offences_2017.rds")
write_rds(offences2018, "data/rds/drug_offences_2018.rds")
write_rds(offences2019, "data/rds/drug_offences_2019.rds")
write_rds(offences2020, "data/rds/drug_offences_2020.rds")
write_rds(offences2021, "data/rds/drug_offences_2021.rds")
write_rds(offences2022, "data/rds/drug_offences_2022.rds")
```

```{r}
thailand_sf = read_rds("data/rds/thailand_sf.rds")
drug_offences = read_rds("data/rds/drug_offences.rds")
offences2017 = read_rds("data/rds/drug_offences_2017.rds")
offences2018 = read_rds("data/rds/drug_offences_2018.rds")
offences2019 = read_rds("data/rds/drug_offences_2019.rds")
offences2020 = read_rds("data/rds/drug_offences_2020.rds")
offences2021 = read_rds("data/rds/drug_offences_2021.rds")
offences2022 = read_rds("data/rds/drug_offences_2022.rds")
```

Now let us see the plot of the boundary data and the year-by-year drug offences.

```{r}
#| fig-width: 12
tmap_mode("view")
tm_shape(thailand_sf) +
  tm_polygons()
tmap_mode("plot")
```

```{r}
#| fig-width: 12
#| fig-height: 12
tmap_mode("plot")

map17 = tm_shape(offences2017) +
  tm_fill("Total", style = "quantile") +
  tm_borders(alpha = 1) + 
  tm_layout(main.title = "Total number of cases, 2017",
            main.title.position = "center",
            main.title.size = 1,
            frame = TRUE)

map18 = tm_shape(offences2018) +
  tm_fill("Total", style = "quantile") +
  tm_borders(alpha = 1) + 
  tm_layout(main.title = "Total number of cases, 2018",
            main.title.position = "center",
            main.title.size = 1,
            frame = TRUE)

map19 = tm_shape(offences2019) +
  tm_fill("Total", style = "quantile") +
  tm_borders(alpha = 1) + 
  tm_layout(main.title = "Total number of cases, 2019",
            main.title.position = "center",
            main.title.size = 1,
            frame = TRUE)

map20 = tm_shape(offences2020) +
  tm_fill("Total", style = "quantile") +
  tm_borders(alpha = 1) + 
  tm_layout(main.title = "Total number of cases, 2020",
            main.title.position = "center",
            main.title.size = 1,
            frame = TRUE)

map21 = tm_shape(offences2021) +
  tm_fill("Total", style = "quantile") +
  tm_borders(alpha = 1) + 
  tm_layout(main.title = "Total number of cases, 2021",
            main.title.position = "center",
            main.title.size = 1,
            frame = TRUE)

map22 = tm_shape(offences2022) +
  tm_fill("Total", style = "quantile") +
  tm_borders(alpha = 1) + 
  tm_layout(main.title = "Total number of cases, 2022",
            main.title.position = "center",
            main.title.size = 1,
            frame = TRUE)

tmap_arrange(map17, map18, map19, map20, map21, map22,
             ncol = 3)
```

There is one thing to note here, there is a significant decrease in the max number of cases in 2022, dropping from 40,983 to just 17,209. This may be useful for later analysis.

## Global Spatial Autocorrelation Analysis

Now let us start to perform our Global Spatial Autocorrelation Analysis! First, let us plot the neighbours of each province.

```{r}
wm_q2017 = offences2017 %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
```

```{r}
str(wm_q2017)
```

If you notice carefully above, there is one province with no neighbours at all. However, this should not be the case. After careful examination, I identified this as Phuket.

```{r}
wm_q2017 %>% filter(nb == "0") %>% select(ADM1_EN, nb, Total)
```

Phuket is unique as it is an island on its own, while being its own province. However, it is actually a neighbour of Phang Nga. Phuket is connected to Phang Nga via a bridge, and the island next to Phuket is also considered as Phang Nga. As such, I will manually add them to be neighbours of each other and recompute the weight

```{r}
wm_q2017 %>% filter(ADM1_EN == "Phangnga") %>% select(ADM1_EN, nb, Total)
```

```{r}
wm_q2017$nb[c(63,66,67)]
```

As we can see, common neighbour is 64, so 64 is Phang Nga. Now, we find the number for Phuket. As we know Phang Nga is 64, and in our *str()* display, we see Phuket's neighbour list is directly under Phang Nga's neighbour list. We can also see that the number 65 is not within any of the neighbour's list. as such we can determine that Phuket is 65.

```{r}
wm_q2017$nb[wm_q2017$ADM1_EN == "Phuket"] = as.integer(64)
wm_q2017$nb[wm_q2017$ADM1_EN == "Phangnga"] = list(as.integer(c(63, 65, 66, 67)))
wm_q2017 %>% filter(ADM1_EN == c("Phuket", "Phangnga")) %>% select(ADM1_EN, nb, Total)
```

Now we can compute the weights.

```{r}
wm_q2017 = wm_q2017 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)
```

Now with the weights computed, I shall derive the Queen's contiguity weights using **sfdep**.

```{r}
wm_q2018 = offences2018 %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
		 
wm_q2018$nb[wm_q2018$ADM1_EN == "Phuket"] = as.integer(64)
wm_q2018$nb[wm_q2018$ADM1_EN == "Phangnga"] = list(as.integer(c(63, 65, 66, 67)))

wm_q2018 = wm_q2018 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)


wm_q2019 = offences2019 %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
		 
wm_q2019$nb[wm_q2019$ADM1_EN == "Phuket"] = as.integer(64)
wm_q2019$nb[wm_q2019$ADM1_EN == "Phangnga"] = list(as.integer(c(63, 65, 66, 67)))

wm_q2019 = wm_q2019 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)
		 

wm_q2020 = offences2020 %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
		 
wm_q2020$nb[wm_q2020$ADM1_EN == "Phuket"] = as.integer(64)
wm_q2020$nb[wm_q2020$ADM1_EN == "Phangnga"] = list(as.integer(c(63, 65, 66, 67)))

wm_q2020 = wm_q2020 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)
		 

wm_q2021 = offences2021 %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
		 
wm_q2021$nb[wm_q2021$ADM1_EN == "Phuket"] = as.integer(64)
wm_q2021$nb[wm_q2021$ADM1_EN == "Phangnga"] = list(as.integer(c(63, 65, 66, 67)))

wm_q2021 = wm_q2021 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)
		 

wm_q2022 = offences2022 %>%
  mutate(nb = st_contiguity(geometry),
         .before = 1)
		 
wm_q2022$nb[wm_q2022$ADM1_EN == "Phuket"] = as.integer(64)
wm_q2022$nb[wm_q2022$ADM1_EN == "Phangnga"] = list(as.integer(c(63, 65, 66, 67)))

wm_q2022 = wm_q2022 %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)
```

Now, let us perform our **Global Moran's I permutation test**. We have the following hypothesis:

-   H0 = The distribution of drug abuse cases in Thailand are randomly distributed.

-   H1 = The distribution of drug abuse cases in Thailand are **not** randomly distributed.

I shall set a seed to ensure consistency in the results, and perform 100 permutations.

```{r}
set.seed(1234)

global_moran_perm(wm_q2017$Total,
                  wm_q2017$nb,
                  wm_q2017$wt,
                  nsim = 99)

global_moran_perm(wm_q2018$Total,
                  wm_q2018$nb,
                  wm_q2018$wt,
                  nsim = 99)

global_moran_perm(wm_q2019$Total,
                  wm_q2019$nb,
                  wm_q2019$wt,
                  nsim = 99)

global_moran_perm(wm_q2020$Total,
                  wm_q2020$nb,
                  wm_q2020$wt,
                  nsim = 99)

global_moran_perm(wm_q2021$Total,
                  wm_q2021$nb,
                  wm_q2021$wt,
                  nsim = 99)

global_moran_perm(wm_q2022$Total,
                  wm_q2022$nb,
                  wm_q2022$wt,
                  nsim = 99)
```

With the exception of 2017 and 2019 having p-value \> 0.05, we can reject the null hypothesis that the distribution of drug abuse cases are randomly distributed. However, we do see the value be fairly close to 0, which hints that there is not much signs of clustering, although clustering is present.

## Local Spatial Autocorrelation Analysis

I shall do a **Local Moran's I** using **sfdep** to find any spatial clusters and/or outliers.

```{r}
lisa2017 = wm_q2017 %>% 
  mutate(local_moran = local_moran(
    Total, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

lisa2018 = wm_q2018 %>% 
  mutate(local_moran = local_moran(
    Total, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

lisa2019 = wm_q2019 %>% 
  mutate(local_moran = local_moran(
    Total, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

lisa2020 = wm_q2020 %>% 
  mutate(local_moran = local_moran(
    Total, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

lisa2021 = wm_q2021 %>% 
  mutate(local_moran = local_moran(
    Total, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

lisa2022 = wm_q2022 %>% 
  mutate(local_moran = local_moran(
    Total, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

In order to know if I should use the mean or median, I shall check the overall skewness of the data of each year.

```{r}
#| fig-width: 12
#| fig-height: 12
par(mfrow = c(3,2))
hist(lisa2017$skewness)
hist(lisa2018$skewness)
hist(lisa2019$skewness)
hist(lisa2020$skewness)
hist(lisa2021$skewness)
hist(lisa2022$skewness)
```

For consistency, I shall use the same for all years. As such, I will observe if the data across the different years rather than individually. The data is mainly skewed away from 0, as such I shall use median.

```{r}
#| fig-width: 12
#| fig-height: 18
tmap_mode("plot")
lisa_map2017 = tm_shape(lisa2017) +
  tm_fill("ii") +
  tm_borders(alpha = 1) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Offences, Thailand 2017")

p_map2017 = tm_shape(lisa2017)+
  tm_fill("p_ii_sim", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values of local Moran's I")

lisa_map2018 = tm_shape(lisa2018) +
  tm_fill("ii") +
  tm_borders(alpha = 1) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Offences, Thailand 2018")

p_map2018 = tm_shape(lisa2018)+
  tm_fill("p_ii_sim", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values of local Moran's I")

lisa_map2019 = tm_shape(lisa2019) +
  tm_fill("ii") +
  tm_borders(alpha = 1) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Offences, Thailand 2019")

p_map2019 = tm_shape(lisa2019)+
  tm_fill("p_ii_sim", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values of local Moran's I")

lisa_map2020 = tm_shape(lisa2020) +
  tm_fill("ii") +
  tm_borders(alpha = 1) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Offences, Thailand 2020")

p_map2020 = tm_shape(lisa2020)+
  tm_fill("p_ii_sim", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values of local Moran's I")

lisa_map2021 = tm_shape(lisa2021) +
  tm_fill("ii") +
  tm_borders(alpha = 1) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Offences, Thailand 2021")

p_map2021 = tm_shape(lisa2021)+
  tm_fill("p_ii_sim", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values of local Moran's I")

lisa_map2022 = tm_shape(lisa2022) +
  tm_fill("ii") +
  tm_borders(alpha = 1) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of Drug Offences, Thailand 2022")

p_map2022 = tm_shape(lisa2022)+
  tm_fill("p_ii_sim", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values of local Moran's I")

tmap_arrange(lisa_map2017, p_map2017, 
             lisa_map2018, p_map2018, 
             lisa_map2019, p_map2019, 
             lisa_map2020, p_map2020, 
             lisa_map2021, p_map2021, 
             lisa_map2022, p_map2022, 
             ncol = 2)
```

```{r}
#| fig-width: 12
#| fig-height: 12
lisa_map17 = tm_shape(lisa2017) +
                tm_polygons() + 
                tm_borders(alpha = 0.5) +
              tm_shape(lisa2017 %>% filter(p_ii_sim < 0.05)) +
                tm_fill("median", labels = "2017") + 
                tm_borders(alpha = 0.5)

lisa_map18 = tm_shape(lisa2018) +
                tm_polygons() + 
                tm_borders(alpha = 0.5) +
              tm_shape(lisa2018 %>% filter(p_ii_sim < 0.05)) +
                tm_fill("median", labels = "2018") + 
                tm_borders(alpha = 0.5)

lisa_map19 = tm_shape(lisa2019) +
                tm_polygons() + 
                tm_borders(alpha = 0.5) +
              tm_shape(lisa2019 %>% filter(p_ii_sim < 0.05)) +
                tm_fill("median", labels = "2019") + 
                tm_borders(alpha = 0.5)

lisa_map20 = tm_shape(lisa2020) +
                tm_polygons() + 
                tm_borders(alpha = 0.5) +
              tm_shape(lisa2020 %>% filter(p_ii_sim < 0.05)) +
                tm_fill("median", labels = "2020") + 
                tm_borders(alpha = 0.5)

lisa_map21 = tm_shape(lisa2021) +
                tm_polygons() + 
                tm_borders(alpha = 0.5) +
              tm_shape(lisa2021 %>% filter(p_ii_sim < 0.05)) +
                tm_fill("median", labels = "2021") + 
                tm_borders(alpha = 0.5)

lisa_map22 = tm_shape(lisa2022) +
                tm_polygons() + 
                tm_borders(alpha = 0.5) +
              tm_shape(lisa2022 %>% filter(p_ii_sim < 0.05)) +
                tm_fill("median", labels = "2022") + 
                tm_borders(alpha = 0.5)

tmap_arrange(lisa_map17, lisa_map18, lisa_map19, lisa_map20, lisa_map21, lisa_map22, ncol = 3)
```

Based on this graph, we can roughly spot a common cluster of low cases happening around Nakhon Sawan and its neighbouring countries.

Interestingly, we see a disappearance of a high cluster around Chachoengsao, and an emerging high cluster around the north-eastern part of thailand, around Khon Kaen.

However, we do need to consider that in 2022 saw a massive drop of cases, from previous max of \>40,000 cases in a province in 2021, to merely a max of \<18,000 cases in a province in 2022, a staggering 55% decrease. It is likely that the high cluster that emerged in 2022 is not due to an increase of cases, but rather a drop in cases in its neighbours.

## Observations and Analysis

First, let us explain the drop in drug cases in 2022. This is very likely due to the allowing of recreational use of cannabis, when Thailand historically became the first country in South-East Asia (SEA) to fully decriminalise cannabis in June 2022 (Chen, 2024). I also believe that this lead to the disappearance of the high cluster around Chachoengsao, as it had relatively stable number of drug cases leading up to 2022, where it eventually saw a drop.

However, we are seeing Thailand moving back to banning recreational use of cannabis, only allowing prescription for medical usage (Chen, 2024). As such, we may expect cases to rise again from 2025 onward.

As we see the cluster of low cases happening around Nakhon, this may be attributed to a higher neighbouring provinces further north, likely due to the "Golden Triangle".

[![Picture of the Golden Triangle, taken from Bloomberg Originals](images/clipboard-1551585916.png)](https://www.youtube.com/watch?v=MO29RHhlS6g)

This is the intersect where all three countries share borders with one-another, and has become a large source of drug trafficking due to drug lord Zhao Wei (Bloomberg, 2024). We can see the areas around the Golden Triangle have high number of cases, particularly Chiang Rai and Chiang Mai. As we head further inland, the drug abuse rates start to lower, and as such we see a cluster of provinces with lower case numbers.

We also see a lot of cases in the north-eastern part of Thailand. This is where the Mekong River resides, bordering between Laos and Thailand.

[![Map of the Mekong River, Taken from the World Wildlife Fund (WWF)](images/clipboard-99607452.png)](https://www.worldwildlife.org/magazine/issues/spring-2015/articles/the-mekong)

There have been reports of drug traffickers have been moving their supply chains downwards through the Mekong River basin (Peck, 2024), which likely means that provinces bordering around the area are where drug trafficking have a high probability to occur.

We see this in a report by the United Nations Office on Drugs and Crime (UNODC) Report in 2022, where Laos reported an increased outflow of drugs through its border with Thailand, and was correlated to the rising seizures of drugs in the north-eastern part of Thailand, including Khon Kaen and Maha Sarakham. To further support this, Thailand also seized large quantities of meth pills in Maha Sarakham back in 2022 (The Nation, 2022).

## References

Chen, H., & Olarn, K. (2024, January 12). Thailand moves to ban recreational cannabis use, 18 months after historic decriminalization. *CNN.* <https://edition.cnn.com/2024/01/10/asia/thailand-cannabis-reverse-proposed-laws-intl-hnk/>

Bloomberg Originals. (2024, August 20). *How One Man Rules in Asia’s Golden Triangle* \[Video\]. Youtube. <https://www.youtube.com/watch?v=MO29RHhlS6g>

World Wildlife Fund (WWF). (2015). *In Depth: The Mekong.* <https://www.worldwildlife.org/magazine/issues/spring-2015/articles/the-mekong>

Peck, G. (2024, May 29). East, Southeast Asia had record methamphetamine seizures last year. Profits remain in the billions. *The* *Associated Press.* <https://apnews.com/article/crystal-methamphetamine-golden-triangle-shan-ketamine-cb5de08da123b150210793a667c0c149>

United Nations Office on Drugs and Crime (UNODC). (2022). *Synthetic Drugs in East and Southeast Asia - Latest developments and challenges.* <https://www.unodc.org/roseap/uploads/documents/Publications/2022/Synthetic_Drugs_in_East_and_Southeast_Asia_2022_web.pdf>

The Nation. (2022, October 24). *Thai police launch manhunt for ‘big boss’ after 10 million meth pills seized.* <https://www.nationthailand.com/thailand/general/40021344>
