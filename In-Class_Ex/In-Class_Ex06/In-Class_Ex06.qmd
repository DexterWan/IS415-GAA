---
title: "In-Class Exercise 6"
author: "Dexter Wan"
date: "September 23, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## Description

Learning about Global and Local measures of Spatial Autocorrelation in R.

### Changelog

23 Sep 24: Completed In-Class Exercise 6.

## Importing Data and Packages

```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse)
```

```{r}
hunan_sf = st_read(dsn = "data/geospatial", layer = "Hunan")
hunan_2012 = read.csv("data/aspatial/Hunan_2012.csv")
```

```{r}
hunan_GDPPC = left_join(hunan_sf, hunan_2012) %>% select(1:4, 6, 15)
```

## Global Measures of Spatial Associatoin

```{r}
wm_q = hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry), 
         wt = st_weights(nb, style = "W"), 
         .before = 1)
```

nb is the neighbour list created by *st_neighbours().* Style "W" is for row-standardised weights. The ".before = 1" is to append the new columns in the front instead of the back.

```{r}
moranI = global_moran(wm_q$GDPPC,
                      wm_q$nb,
                      wm_q$wt)
glimpse(moranI)
```

```{r}
global_moran_test(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt)
```

For permutation, we need to make it reproducible by setting a seed.

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(wm_q$GDPPC,
                  wm_q$nb,
                  wm_q$wt,
                  nsim = 999)
```

## Local Measures

```{r}
lisa = wm_q %>%
  mutate(local_moran = local_moran(
    GDPPC, nb, wt, nsim = 999
  ), .before = 1) %>%
  unnest(local_moran) #This is needed to see the output in table form
```

Notes on the output:

-   There are 3 p-values, stay consistent on which one to use

    -   Usually use p-sim

-   There are 3 hot-cold columns, but focus on: mean and median

    -   Determine which to use by the skewness. If skewness is closer to 0, then can use mean, else use median

    -   Determine skewness through all rows: if majority are far away from 0, then use median.

    -   Perhaps using a histogram to plot it would be good to visualise the overall skewness.

```{r}
#| fig-width: 12
tmap_mode("plot")

map1 = tm_shape(lisa) +
  tm_fill("ii") +
  tm_borders(alpha = 1) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I of GDPPC")

map2 = tm_shape(lisa)+
  tm_fill("p_ii", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values of local Moran's I")

tmap_arrange(map1, map2, ncol = 2)
```

Visualising the LISA map

```{r}
lisa_sig = lisa %>% filter(p_ii < 0.05)
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 1) +
tm_shape(lisa_sig) +
  tm_fill("mean") +
  tm_borders(alpha = 0.5)
```

Computing local Gi statistics

```{r}
wm_idw = hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),
         .before = 1)
```

```{r}
HCSA = wm_idw %>%
  mutate(local_Gi = local_gstar_perm( GDPPC, nb, wt, nsim = 999),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
map1 = tm_shape(HCSA) +
  tm_fill("gi_star") +
  tm_borders(alpha = 1)
map2 = tm_shape(HCSA) +
  tm_fill("p_sim", 
          breaks = c(0, 0.001, 0.01, 0.05, 1), 
          labels = c("< 0.001", "0.01", "0.05", "Not Sig")) +
  tm_borders(alpha = 1) +
  tm_layout(main.title = "p-values")
tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig = HCSA %>% filter(p_sim < 0.05)
tm_shape(HCSA) +
  tm_polygons()+
  tm_borders(alpha = 1) +
tm_shape(HCSA_sig) +
  tm_fill("gi_star") +
  tm_borders(alpha = 0.5)
```
