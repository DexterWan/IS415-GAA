[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Dexter’s IS415-GAA",
    "section": "",
    "text": "I am Dexter Wan, a final year Computer Science student from SMU, undergoing the cyber security track.\nThis webpage is to document the exercises done for IS415 - Geospatial Analytics and Applications."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Welcome to Dexter’s IS415-GAA",
    "section": "",
    "text": "I am Dexter Wan, a final year Computer Science student from SMU, undergoing the cyber security track.\nThis webpage is to document the exercises done for IS415 - Geospatial Analytics and Applications."
  },
  {
    "objectID": "index.html#exercises",
    "href": "index.html#exercises",
    "title": "Welcome to Dexter’s IS415-GAA",
    "section": "Exercises",
    "text": "Exercises"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/data/MPSZ-2019.html",
    "href": "In-Class_Ex/In-Class_Ex02/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/data/MPSZ-2019.html",
    "href": "In-Class_Ex/In-Class_Ex01/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Learning to plot Choropleth maps using R.\n\n\n26 Aug 24: Updated the description and added a changelog."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#description",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#description",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Learning to plot Choropleth maps using R.\n\n\n26 Aug 24: Updated the description and added a changelog."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2",
    "section": "Importing Data",
    "text": "Importing Data\nLoad sf, tidyverse and tmap packages into R environment, and import Master Plan 2014 data and Singapore Residents data into R environment:\n\npacman::p_load(sf, tidyverse, tmap)\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\npopdata = read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#data-preparation",
    "title": "Hands-on Exercise 2",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nData Wrangling\nPerforming data wrangling on the data. I have adjusted the rowSums for the grouping as the order of columns may be sorted differently. For example, age group 5_to_9 is under column 14, not 12.\n\npopwider &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG,values_from=POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\npopwider\n\n# A tibble: 332 × 21\n   PA      SZ    `0_to_4` `10_to_14` `15_to_19` `20_to_24` `25_to_29` `30_to_34`\n   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo… Ang …      170        280        340        270        260        310\n 2 Ang Mo… Chen…     1060       1040       1160       1330       1720       2020\n 3 Ang Mo… Chon…      850       1020       1070       1310       1610       1890\n 4 Ang Mo… Kebu…      680        960       1010       1170       1410       1420\n 5 Ang Mo… Semb…      210        400        450        500        500        340\n 6 Ang Mo… Shan…      560        640        700        860        970       1030\n 7 Ang Mo… Tago…      200        390        460        590        680        500\n 8 Ang Mo… Town…      670        930        830        890       1310       1410\n 9 Ang Mo… Yio …        0          0          0          0          0          0\n10 Ang Mo… Yio …      160        210        260        300        320        240\n# ℹ 322 more rows\n# ℹ 13 more variables: `35_to_39` &lt;dbl&gt;, `40_to_44` &lt;dbl&gt;, `45_to_49` &lt;dbl&gt;,\n#   `50_to_54` &lt;dbl&gt;, `55_to_59` &lt;dbl&gt;, `5_to_9` &lt;dbl&gt;, `60_to_64` &lt;dbl&gt;,\n#   `65_to_69` &lt;dbl&gt;, `70_to_74` &lt;dbl&gt;, `75_to_79` &lt;dbl&gt;, `80_to_84` &lt;dbl&gt;,\n#   `85_to_89` &lt;dbl&gt;, `90_and_over` &lt;dbl&gt;\n\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG,values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6]) +rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\npopdata2020\n\n# A tibble: 332 × 7\n   PA         SZ                   YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n   &lt;chr&gt;      &lt;chr&gt;                &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Cen…  1290             2760   760  4810      0.743\n 2 Ang Mo Kio Cheng San             5640            16460  6050 28150      0.710\n 3 Ang Mo Kio Chong Boon            5100            15000  6470 26570      0.771\n 4 Ang Mo Kio Kebun Bahru           4620            13010  5120 22750      0.749\n 5 Ang Mo Kio Sembawang Hills       1880             3630  1310  6820      0.879\n 6 Ang Mo Kio Shangri-La            3330             9050  3610 15990      0.767\n 7 Ang Mo Kio Tagore                1940             4480  1530  7950      0.775\n 8 Ang Mo Kio Townsville            4190            11950  5100 21240      0.777\n 9 Ang Mo Kio Yio Chu Kang             0                0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East     1110             2410   750  4270      0.772\n# ℹ 322 more rows\n\n\n\n\nJoining attribute and geospatial data\nSetting all location data to uppercase and joining it with the Master Plan 2014 data.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA,SZ), .funs = list(toupper)) %&gt;%\n  filter('ECONOMY ACTIVE' &gt; 0)\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020, by = c(\"SUBZONE_N\"=\"SZ\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#plotting-a-choropleth-map",
    "title": "Hands-on Exercise 2",
    "section": "Plotting a choropleth map",
    "text": "Plotting a choropleth map\n\nQuick map using qtm()\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\nComplete Map with elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Oranges\", title = \"Dependency Ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by Subzone\",\n            main.title.position = \"center\", frame = TRUE) +\n  tm_borders(lwd = 0.1, alpha = 0.5) +\n  tm_compass() +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nMap using tm_polygons()\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\nData classification methods of tmap\nQuantile:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Oranges\", title = \"Dependency Ratio\", n = 5) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nEqual:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", style = \"equal\", palette = \"Oranges\", title = \"Dependency Ratio\", n = 5) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nCustom Breaks:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", breaks = c(0, 0.6, 0.7, 0.8, 0.9, 1), palette = \"-Greens\", title = \"Dependency Ratio\") +\n  tm_borders(alpha = 0.5) + \n  tmap_style(\"grey\")\n\ntmap style set to \"grey\"\n\n\nother available styles are: \"white\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\n\nDrawing Small Multiple Maps\nAssign multiple values to at least one aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"), palette = list(\"Greens\", \"Oranges\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) + \n  tmap_style(\"grey\")\n\ntmap style set to \"grey\"\n\n\nother available styles are: \"white\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\nUsing tm_facets().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"), palette = list(\"Greens\", \"Oranges\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) + \n  tmap_style(\"grey\")\n\ntmap style set to \"grey\"\n\n\nother available styles are: \"white\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\nUsing tmap_arrange()\n\nymap = tm_shape(mpsz_pop2020) +\n  tm_polygons(\"YOUNG\", palette = \"Greens\") + \n  tmap_style(\"grey\")\n\ntmap style set to \"grey\"\n\n\nother available styles are: \"white\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\namap = tm_shape(mpsz_pop2020) +\n  tm_polygons(\"AGED\", palette = \"Oranges\") + \n  tmap_style(\"grey\")\n\ntmap style set to \"grey\"\nother available styles are: \"white\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\ntmap_arrange(ymap, amap, asp = 1, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nMapping Spatial Object meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Oranges\", title = \"Dependency Ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by Subzone\",\n            main.title.position = \"center\", frame = FALSE, legend.outside = TRUE) +\n  tm_borders(lwd = 0.1, alpha = 0.5) +\n  tm_compass() +\n  tm_scale_bar()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Learning to import data, displaying and modifying shapefiles in R.\n\n\n19 Aug 24: Completed Hands-on Exercise 2\n26 Aug 24: Updated the description and added a changelog."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#description",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#description",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Learning to import data, displaying and modifying shapefiles in R.\n\n\n19 Aug 24: Completed Hands-on Exercise 2\n26 Aug 24: Updated the description and added a changelog."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nLoad sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)\n\nImport geospatial data into R environment:\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\ncyclingpath = st_read(dsn = \"data/geospatial\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1",
    "section": "Checking the Content of a Simple Feature Data Frame",
    "text": "Checking the Content of a Simple Feature Data Frame\nUsing st_geometry to display the geometry list-column:\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nUsing glimpse to show a few entries and the data type of each field:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nUsing head to reveal complete information of the data frame, limiting to 5 records:\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Plotting Geospatial Data",
    "text": "Plotting Geospatial Data\nPlotting all data of the “Master Plan 2014”:\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nPlotting only the geometry:\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nPlotting only “PLN_AREA_N”:\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-projection",
    "title": "Hands-on Exercise 1",
    "section": "Working with Projection",
    "text": "Working with Projection\n\nAssigning EPSG code\nShowing the coordinate reference system (crs) of the “Master Plan 2014”:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nReassigning the EPSG code to 3414:\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransform projection (from wgs84 to svy21)\nUsing st_transform to transform preschool crs to 3414:\n\npreschool3414 &lt;- st_transform(preschool, crs = 3414)\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\nImport and list aspatial data from csv file:\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 402 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): name, host_name, neighbourhood, room_type\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\nlgl   (2): neighbourhood_group, license\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlist(listings)\n\n[[1]]\n# A tibble: 402 × 18\n         id name    host_id host_name neighbourhood_group neighbourhood latitude\n      &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;lgl&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  2992450 \"Luxur…  4.62e6 Kenneth   NA                  THIRD WARD        42.7\n 2  3820211 \"Resto…  1.96e7 Terra     NA                  SIXTH WARD        42.7\n 3  5651579 \"Large…  2.93e7 Gregg     NA                  SECOND WARD       42.6\n 4  6623339 \"Cente…  1.96e7 Terra     NA                  SIXTH WARD        42.7\n 5  8035768 \"Entir…  4.24e7 John M    NA                  TENTH WARD        42.7\n 6  8035784 \"Delig…  4.24e7 John M    NA                  TENTH WARD        42.7\n 7  9005989 \"Studi…  1.78e7 Sugey     NA                  SIXTH WARD        42.7\n 8  9501054 \"Spaci…  2.93e7 Gregg     NA                  SECOND WARD       42.6\n 9 10768745 \"Alb h…  5.69e6 Elizabeth NA                  FOURTEENTH W…     42.7\n10 11253948 \"/Fire…  4.26e6 Peter     NA                  FIFTEENTH WA…     42.7\n# ℹ 392 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;lgl&gt;\n\n\nCreating a simple feature data frame from listings:\n\nlistings_sf &lt;- st_as_sf(listings, coords = c(\"longitude\",\"latitude\"), crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nglimpse(listings_sf)\n\nRows: 402\nColumns: 17\n$ id                             &lt;dbl&gt; 2992450, 3820211, 5651579, 6623339, 803…\n$ name                           &lt;chr&gt; \"Luxury 2 bedroom apartment\", \"Restored…\n$ host_id                        &lt;dbl&gt; 4621559, 19648678, 29288920, 19648678, …\n$ host_name                      &lt;chr&gt; \"Kenneth\", \"Terra\", \"Gregg\", \"Terra\", \"…\n$ neighbourhood_group            &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ neighbourhood                  &lt;chr&gt; \"THIRD WARD\", \"SIXTH WARD\", \"SECOND WAR…\n$ room_type                      &lt;chr&gt; \"Entire home/apt\", \"Entire home/apt\", \"…\n$ price                          &lt;dbl&gt; 70, 118, 75, 131, 305, 199, 88, 69, 50,…\n$ minimum_nights                 &lt;dbl&gt; 28, 2, 1, 2, 2, 3, 1, 1, 1, 1, 1, 18, 5…\n$ number_of_reviews              &lt;dbl&gt; 9, 302, 346, 317, 56, 18, 590, 384, 654…\n$ last_review                    &lt;date&gt; 2022-08-17, 2024-05-05, 2024-06-04, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.07, 2.53, 3.13, 2.89, 0.52, 0.17, 6.1…\n$ calculated_host_listings_count &lt;dbl&gt; 1, 4, 2, 4, 2, 2, 1, 2, 1, 9, 2, 4, 2, …\n$ availability_365               &lt;dbl&gt; 68, 253, 61, 349, 348, 148, 338, 74, 10…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 16, 30, 14, 4, 0, 37, 40, 104, 36, 1…\n$ license                        &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry                       &lt;POINT [m]&gt; POINT (-169846.9 15164019), POINT…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\n\nBuffering\nThe scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\n\nPoint-in-polygon count\nThe scenario: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nIdentify pre-schools located in each planning subzone using st_intersects and length to get the number of pre-schools in each subzone.\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nUse top_n to list the planning zone with most number of pre-schools.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nUse st_area to get the area of each planning subzone, then use mutate to calculate the density of pre-schools in each subzone.\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area*1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nHistogram\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\n\nHistogram with better visualisation\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\nScatterplot\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Learning to perform Order Spatial Point Pattern Analysis in R.\n\n\n31 Aug 24: Completed Hands-on Exercise 3."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#description",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#description",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Learning to perform Order Spatial Point Pattern Analysis in R.\n\n\n31 Aug 24: Completed Hands-on Exercise 3."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Exercise 3",
    "section": "Importing Data",
    "text": "Importing Data\n\npacman::p_load(sf, spatstat, raster, tidyverse, tmap)\n\nalso installing the dependencies 'deldir', 'polyclip', 'spatstat.sparse', 'goftest', 'tensor', 'spatstat.data', 'spatstat.univar', 'spatstat.geom', 'spatstat.random', 'spatstat.explore', 'spatstat.model', 'spatstat.linnet', 'spatstat.utils'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'deldir' successfully unpacked and MD5 sums checked\npackage 'polyclip' successfully unpacked and MD5 sums checked\npackage 'spatstat.sparse' successfully unpacked and MD5 sums checked\npackage 'goftest' successfully unpacked and MD5 sums checked\npackage 'tensor' successfully unpacked and MD5 sums checked\npackage 'spatstat.data' successfully unpacked and MD5 sums checked\npackage 'spatstat.univar' successfully unpacked and MD5 sums checked\npackage 'spatstat.geom' successfully unpacked and MD5 sums checked\npackage 'spatstat.random' successfully unpacked and MD5 sums checked\npackage 'spatstat.explore' successfully unpacked and MD5 sums checked\npackage 'spatstat.model' successfully unpacked and MD5 sums checked\npackage 'spatstat.linnet' successfully unpacked and MD5 sums checked\npackage 'spatstat.utils' successfully unpacked and MD5 sums checked\npackage 'spatstat' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\dexto\\AppData\\Local\\Temp\\RtmpELdYLR\\downloaded_packages\n\n\n\nspatstat installed\n\nchildcare_sf = st_read(\"data/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nmpsz_sf = st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nsg_sf = st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nBoth mpsz_sf and sg_sf have the wrong EPSG, and must be set to 3414:\n\nmpsz_sf = st_set_crs(mpsz_sf, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nsg_sf = st_set_crs(sg_sf, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-geospatial-data-sets",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#mapping-geospatial-data-sets",
    "title": "Hands-on Exercise 3",
    "section": "Mapping geospatial data sets",
    "text": "Mapping geospatial data sets\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf) + tm_dots()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 3",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nWe need to convert the data from sf data frames into sp Spatial class:\n\nchildcare = as_Spatial(childcare_sf)\nmpsz = as_Spatial(mpsz_sf)\nsg = as_Spatial(sg_sf)\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\nspatstat requires data in ppp object form, but there is no way to convert Spatial classes into ppp directly. As such, we must convert them into Spatial objects first:\n\nchildcare_sp = as(childcare, 'SpatialPoints')\nsg_sp = as(sg, 'SpatialPolygons')\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n#childcare_ppp = as.ppp(childcare_sp)\n\nAs the current code gives an error, I have elected to proceed to directly take the sf dataframe and convert it into ppp directly, taking reference from https://www.paulamoraga.com/book-spatial/the-spatstat-package.html:\n\nchildcare_ppp = as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf)) \n\nWarning: data contain duplicated points\n\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nHandling duplicated points\nCheck for duplication in ppp object:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nWe can check for the number of points using multiplicity():\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nPlotting this out, we can identify the duplicates by the colour of the dots. The darker dots signals multiple points with the same coordinates:\n\ntm_shape(childcare) + tm_dots(alpha=0.3)\n\n\n\n\n\nThere are 3 techniques to deal with duplicates:\nDelete duplicates - May lose some important data\nJittering - Add small perturbation to duplicate points to make them not occupy the exact same space\nMarks - Make each point unique and attach duplicates as marks (attributes of the points)\nI have applied the jittering approach:\n\nchildcare_ppp_jit = rjitter(childcare_ppp, retry = TRUE, nsim = 1, drop = TRUE)\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\nNext, we will convert sg SpatialPolygon object into owin:\n\nsg_owin = as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\nNow, we combine the owin map with the childcare data:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation-kde",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#kernel-density-estimation-kde",
    "title": "Hands-on Exercise 3",
    "section": "Kernel Density Estimation (KDE)",
    "text": "Kernel Density Estimation (KDE)\nUsage of automatic bandwidth selection method to compute kernel density:\n\nkde_childcareSG_bw = density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE,\n                             kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nRetrieving the bandwidth used:\n\nbw = bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\nRescalling KDE values to change meters to kilometers:\n\nchildcareSG_ppp.km = rescale.ppp(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw.km = density(childcareSG_ppp.km, sigma = bw.diggle, edge = TRUE,\n                                kernel = \"gaussian\")\nplot(kde_childcareSG_bw.km)\n\n\n\n\n\n\n\n\nUsing different bandwidth calculation methods:\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nComparing diggle vs ppl\n\nkde_childcareSG_ppl.km = density(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE,\n                                kernel = \"gaussian\")\npar(mfrow=c(1,2), mai=c(0.2,0.2,0.2,0.2))\nplot(kde_childcareSG_bw.km, main = \"diggle\")\nplot(kde_childcareSG_ppl.km, main = \"ppl\")\n\n\n\n\n\n\n\n\nUsing different kernel methods:\n\npar(mfrow=c(2,2), mai=c(0.2,0.2,0.2,0.2))\n\nplot(density(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE,\n                                kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE,\n                                kernel = \"epanechnikov\"), main = \"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE,\n                                kernel = \"quartic\"), main = \"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE,\n                                kernel = \"disc\"), main = \"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\nComputing KDE using fixed bandwidth:\n\nkde_childcareSG_600 = density(childcareSG_ppp.km, sigma = 0.6, edge = TRUE, \n                                 kernel = \"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\nComputing KDE using adaptive bandwidth:\n\nkde_childcareSG_adaptive = adaptive.density(childcareSG_ppp.km, method = \"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nNow we convert the object into a grid object for mapping:\n\ngridded_kde_childcareSG_bw &lt;- as(kde_childcareSG_bw.km, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nConvert gridded kernal density objects into RasterLayer object:\n\nkde_childcareSG_bw_raster = raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nAssign a projection system to RasterLayer, as our current object has no crs:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\npg = mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm = mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck = mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw = mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\nplot(pg, main = \"Ponggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nConverting the sf objects into owin objects and combining it with childcare points, including the rescalling to km:\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\npar(mfrow=c(2,2),mai=c(0.2,0.2,0.2,0.2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nPlotting the KDE with diggle for the 4 areas:\n\npar(mfrow=c(2,2),mai=c(0.2,0.2,0.2,0.2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nPlotting the KDE with fixed bandwidth for the 4 areas:\n\npar(mfrow=c(2,2),mai=c(0.2,0.2,0.2,0.2))\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 3",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\nWe are using the Clark-Evans test &lt;clarkevans.test()&gt; to perform a test on the data. The hypotheses are as follows:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\n\nTesting spatial point patterns\n\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", \n                alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n\nCCK planning area\n\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = NULL, \n                alternative = c(\"two.sided\"), nsim = 999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93706, p-value = 0.347\nalternative hypothesis: two-sided\n\n\n\n\nTampines planning area\n\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = NULL, \n                alternative = c(\"two.sided\"), nsim = 999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.80594, p-value = 0.0004612\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#g-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#g-function",
    "title": "Hands-on Exercise 3",
    "section": "G-Function",
    "text": "G-Function\nComputing G-function using Gest():\n\n#CCK\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim = c(0,500))\n\n\n\n\n\n\n\n\n\n#Tampines\nG_TM = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_TM, xlim = c(0,500))\n\n\n\n\n\n\n\n\n\nSpatial Randomness Test\nUsage of the Monte Carlo test to test the random distribution of childcare services in CCK and Tampines.\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nG_CK.csr = envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(G_CK.csr, xlim = c(0,500))\n\n\n\n\n\n\n\n\n\nG_TM.csr = envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(G_TM.csr, xlim = c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#f-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#f-function",
    "title": "Hands-on Exercise 3",
    "section": "F-Function",
    "text": "F-Function\nCompute F-function using Fest():\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\n\nF_TM = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_TM)\n\n\n\n\n\n\n\n\n\nSpatial Randomness Test\nUsage of the same hypothesis as shown in G-Function’s test.\n\nF_CK.csr = envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\n\nF_TM.csr = envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_TM.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#k-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#k-function",
    "title": "Hands-on Exercise 3",
    "section": "K-Function",
    "text": "K-Function\nCompute K-function using Kest():\n\nK_CK = Kest(childcare_ck_ppp, correction = \"Ripley\") \nplot(K_CK, . - r ~ r, ylab = \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\nK_TM = Kest(childcare_tm_ppp, correction = \"Ripley\") \nplot(K_TM, . - r ~ r, ylab = \"K(d)-r\", xlab = \"d(m)\", xlim = c(0,1000))\n\n\n\n\n\n\n\n\n\nSpatial Randomness Test\nUsage of the same hypothesis as shown in G-Function’s test.\n\nK_CK.csr = envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal = TRUE) \n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(K_CK.csr, . - r ~ r, xlab = \"d\", ylab = \"K(d)-r\")\n\n\n\n\n\n\n\n\n\nK_TM.csr = envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal = TRUE) \n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(K_TM.csr, . - r ~ r, xlab = \"d\", ylab = \"K(d)-r\", xlim = c(0,500))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#l-function",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#l-function",
    "title": "Hands-on Exercise 3",
    "section": "L-Function",
    "text": "L-Function\nCompute L-function using Lest():\n\nL_CK = Lest(childcare_ck_ppp, correction = \"Ripley\") \nplot(L_CK, . - r ~ r, ylab = \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\nL_TM = Lest(childcare_tm_ppp, correction = \"Ripley\") \nplot(L_TM, . - r ~ r, ylab = \"L(d)-r\", xlab = \"d(m)\", xlim = c(0,1000))\n\n\n\n\n\n\n\n\n\nSpatial Randomness Test\nUsage of the same hypothesis as shown in G-Function’s test.\n\nL_CK.csr = envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal = TRUE) \n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_CK.csr, . - r ~ r, xlab = \"d\", ylab = \"L(d)-r\")\n\n\n\n\n\n\n\n\n\nL_TM.csr = envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal = TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_TM.csr, . - r ~ r, xlab = \"d\", ylab = \"L(d)-r\", xlim = c(0,500))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "Learning the options for headers (e.g. date-modified) in R.\n\n\n19 Aug 24: Completed In-Class Exercise 1\n26 Aug 24: Updated the description and added a changelog."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#description",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html#description",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "Learning the options for headers (e.g. date-modified) in R.\n\n\n19 Aug 24: Completed In-Class Exercise 1\n26 Aug 24: Updated the description and added a changelog."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html",
    "title": "In-Class Exercise 2",
    "section": "",
    "text": "Learning to write sf in to KML files in R.\n\n\n26 Aug 24: Completed In-Class Exercise 2."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#description",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#description",
    "title": "In-Class Exercise 2",
    "section": "",
    "text": "Learning to write sf in to KML files in R.\n\n\n26 Aug 24: Completed In-Class Exercise 2."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-and-writing-data",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-and-writing-data",
    "title": "In-Class Exercise 2",
    "section": "Importing and writing data",
    "text": "Importing and writing data\n\npacman::p_load(sf, tidyverse, ggplot2, tmap)\nmpsz = st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n#mpsz_kml &lt;- st_read(\"data/MasterPlan2014SubzoneBoundaryWeb.kml\")\n\nThe KML file is unreadable, and thus is not usable in this context. This could be this is a zip KML, which is not readable. Thankfully, we are still able to use the shapefile. The code to read the KML file has been commented out to allow the page to render.\nShapefiles are more robust and have better support compared to KML, and tends to be preferred. We can write sf into a KML file:\n\nst_write(mpsz, \"data/MP14_SUBZONE_WEB_PL.kml\", delete_dsn = TRUE)\n\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n\nThe argument delete_dsn is to ensure that if a file with the same name exists, it will be delete it first. This ensures a overwrite should the data be modified.\nImport the Master Plan 2019 and Master Plan 2019 (No Sea) data:\n\nmpsz2019_shp = st_read(dsn = \"data\", layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz2019_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nAs the CRS for both files are WGS 84, we should transform it into SVY21:\n\nmpsz2019_shp = st_read(dsn = \"data\", layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\npresch = st_read(\"data/PreSchoolsLocation.kml\") %&gt;%\n  st_transform(crs=3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nImport Singapore Residents June 2023 data:\n\npopdata = read_csv(\"data/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nReorganise the population data to base data only on age, planning area and subzone. It also makes age into columns rather than different rows using pivot_wider:\n\npopdata2023 = popdata %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP`= sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\""
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#data-processing",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#data-processing",
    "title": "In-Class Exercise 2",
    "section": "Data Processing",
    "text": "Data Processing\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate(YOUNG = rowSums(.[3:6]) +rowSums(.[14])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+rowSums(.[15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\npopdata2023\n\n# A tibble: 332 × 7\n   PA         SZ                   YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n   &lt;chr&gt;      &lt;chr&gt;                &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Cen…  1240             2830   890  4960      0.753\n 2 Ang Mo Kio Cheng San             5150            15600  6580 27330      0.752\n 3 Ang Mo Kio Chong Boon            4620            14120  7060 25800      0.827\n 4 Ang Mo Kio Kebun Bahru           4320            12400  5640 22360      0.803\n 5 Ang Mo Kio Sembawang Hills       1840             3670  1420  6930      0.888\n 6 Ang Mo Kio Shangri-La            3810             9600  4320 17730      0.847\n 7 Ang Mo Kio Tagore                1870             4320  1790  7980      0.847\n 8 Ang Mo Kio Townsville            3750            11090  5390 20230      0.824\n 9 Ang Mo Kio Yio Chu Kang             0                0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East     1090             2410   880  4380      0.817\n# ℹ 322 more rows\n\n\nJoin the popdata2023 with the Master Plan 2019 data.\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA,SZ), .funs = list(toupper))\n\nmpsz_pop2023 &lt;- left_join(mpsz2019_shp, popdata2023, by = c(\"SUBZONE_N\"=\"SZ\"))\n# pop2023_mpsz &lt;- left_join(popdata2023, mpsz2019_shp, by = c(\"SUBZONE_N\"=\"SZ\"))\n# The commented code will give an error as the sequence of the tables is wrong"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "title": "In-Class Exercise 3",
    "section": "",
    "text": "Learning some error in Hands-on Exercise 3 and how to solve it.\n\n\n02 Sep 24: Created In-Class Exercise 3."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#description",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#description",
    "title": "In-Class Exercise 3",
    "section": "",
    "text": "Learning some error in Hands-on Exercise 3 and how to solve it.\n\n\n02 Sep 24: Created In-Class Exercise 3."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#importing-data",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#importing-data",
    "title": "In-Class Exercise 3",
    "section": "Importing data",
    "text": "Importing data\nInstall maptools. It has been retired, so we must go to posit public package manager to find the old version.\n\n# The above \"eval: false\" prevents the code chunk from running everytime the document is rendered\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nMaptools allows us to perform the conversion of as.SpatialGridDataFrame.im().\nImport Myanmar ACLED data:\n\npacman::p_load(sf, tidyverse)\nacled_sf = read_csv(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe read_csv would read the date given as a string. As such, we need to use the mutate command to convert it into a date format."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "Learning to perform Spatio-Temporial Point Pattern Analysis in R.\n\n\n9 Sep 24: Completed In-Class Exercise 4.\n12 Sep 24: Completed Day-of-Year animation plotting\n16 Sep 24: Added “eval: false” to animation generation code chunks."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#importing-data-and-loading-package",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#importing-data-and-loading-package",
    "title": "In-Class Exercise 4",
    "section": "Importing data and loading package",
    "text": "Importing data and loading package\n\npacman::p_load(sf, raster, spatstat, sparr, tidyverse, tmap, animation)\n\n\nkbb = st_read(dsn = \"data/raw\", layer = \"Kepulauan_Bangka_Belitung\")\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex04\\data\\raw' using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nkbb_sf = st_read(dsn = \"data/raw\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs = 32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex04\\data\\raw' using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n\nConvert into OWIN:\n\nkbb_owin = as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\nclass(kbb_owin)\n\n[1] \"owin\"\n\n\n\nfire_sf = read_csv(\"data/raw/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nfire_sf = fire_sf %&gt;%\n  mutate(DayofYear = yday(acq_date)) %&gt;% #gives a column for day\n  mutate(Month_num = month(acq_date)) %&gt;% #gives a column for numerical month\n  mutate(Month_fac = month(acq_date, label = TRUE, abbr = FALSE)) #gives a column for month spelled out e.g. July"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#plotting",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#plotting",
    "title": "In-Class Exercise 4",
    "section": "Plotting",
    "text": "Plotting\n\nOverall plot\n\ntm_shape(kbb_sf) +\n  tm_polygons() +\n  tm_shape(fire_sf) +\n  tm_dots()\n\n\n\n\n\n\n\n\n\n\nPlotting by month\n\ntm_shape(kbb_sf) +\n  tm_polygons() +\ntm_shape(fire_sf) +\n  tm_dots(size = 0.2) +\ntm_facets(by = \"Month_fac\", free.coords = FALSE, drop.units = TRUE)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#computing-stkde-by-month",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#computing-stkde-by-month",
    "title": "In-Class Exercise 4",
    "section": "Computing STKDE by Month",
    "text": "Computing STKDE by Month\n\nfire_month = fire_sf %&gt;% select(Month_num) #get forest fires by month\nfire_month_ppp = as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\n\nany(duplicated(fire_month_ppp)) #check for duplicate points\n\n[1] FALSE\n\n\n\nfire_month_owin = fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\nComputing the Spatio-Temporal KDE\n\nst_kde = spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n\n\nPlotting individual months:\n\ntims = c(7,8,9,10,11,12)\npar(mfcol = c(2,3), mai=c(0.3,0.3,0.3,0.3))\nfor(i in tims){\n  plot(st_kde, i, override.par = FALSE, fix.range = TRUE, \n       main = paste(\"KDE at month \", i))\n}"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/data/raw/Kepulauan_Bangka_Belitung.html",
    "href": "In-Class_Ex/In-Class_Ex04/data/raw/Kepulauan_Bangka_Belitung.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#description",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#description",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "Learning to perform Spatio-Temporial Point Pattern Analysis in R.\n\n\n9 Sep 24: Completed In-Class Exercise 4.\n12 Sep 24: Completed Day-of-Year animation plotting\n16 Sep 24: Added “eval: false” to animation generation code chunks."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#computing-stkde-by-day-of-year-ver-1",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#computing-stkde-by-day-of-year-ver-1",
    "title": "In-Class Exercise 4",
    "section": "Computing STKDE by Day of Year (Ver 1)",
    "text": "Computing STKDE by Day of Year (Ver 1)\n\n#Create ppp object \nfire_doy_ppp = fire_sf %&gt;%\n  select(DayofYear) %&gt;%\n  as.ppp() \nsummary(fire_doy_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\nCombine ppp and owin:\n\nfire_doy_owin = fire_doy_ppp[kbb_owin] \nsummary(fire_doy_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\nComputing the Spatio-Temporal KDE:\n\nkde_doy = spattemp.density(fire_doy_owin) \n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_doy)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]\n\n\nAnimated plotting:\n\nanimation::saveGIF(plot(kde_doy), movie.name = \"kde_doy1.gif\", interval = 0.1, ani.width = 600)\n\nHere is kde_doy1.gif imported directly through R studio:"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#computing-stkde-by-day-of-year-ver-2",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#computing-stkde-by-day-of-year-ver-2",
    "title": "In-Class Exercise 4",
    "section": "Computing STKDE by Day of Year (Ver 2)",
    "text": "Computing STKDE by Day of Year (Ver 2)\nUsing BOOT.spattemp to determine spatial bandwidth and scalar temporal bandwidth:\n\nset.seed(1234) \nBOOT.spattemp(fire_doy_owin)\n\nInitialising...Done.\nOptimising...\nh = 15102.47 \b; lambda = 16.84806 \nh = 16612.72 \b; lambda = 16.84806 \nh = 15102.47 \b; lambda = 1527.095 \nh = 15480.03 \b; lambda = 771.9715 \nh = 15668.81 \b; lambda = 394.4098 \nh = 15763.2 \b; lambda = 205.6289 \nh = 15810.4 \b; lambda = 111.2385 \nh = 15833.99 \b; lambda = 64.04328 \nh = 15845.79 \b; lambda = 40.44567 \nh = 15851.69 \b; lambda = 28.64687 \nh = 15863.49 \b; lambda = 5.049258 \nh = 15854.64 \b; lambda = 22.74746 \nh = 15860.54 \b; lambda = 10.94866 \nh = 15859.07 \b; lambda = 13.89836 \nh = 14348.82 \b; lambda = 13.89836 \nh = 13216.87 \b; lambda = 12.42351 \nh = 12460.27 \b; lambda = 15.37321 \nh = 10760.88 \b; lambda = 16.11064 \nh = 8875.282 \b; lambda = 11.68608 \nh = 10432.08 \b; lambda = 12.97658 \nh = 7976.084 \b; lambda = 16.66371 \nh = 9286.281 \b; lambda = 15.60366 \nh = 9615.08 \b; lambda = 18.73771 \nh = 9206.581 \b; lambda = 21.61828 \nh = 8140.483 \b; lambda = 18.23073 \nh = 8795.582 \b; lambda = 17.70071 \nh = 9124.381 \b; lambda = 20.83477 \nh = 9164.856 \b; lambda = 19.52699 \nh = 8345.358 \b; lambda = 18.48998 \nh = 9297.65 \b; lambda = 18.67578 \nh = 8928.375 \b; lambda = 16.8495 \nh = 9105.736 \b; lambda = 18.85762 \nDone.\n\n\n         h     lambda \n9105.73611   18.85762 \n\n\nComputing spatio-temporal KDE\n\nkde_doy = spattemp.density(fire_doy_owin, h = 9000, lambda = 19) \n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_doy)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 9000 (spatial)\n  lambda = 19 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [2.001642e-19, 2.445724e-12]\n\n\nAnimated plotting\n\nanimation::saveGIF(plot(kde_doy), movie.name = \"kde_doy2.gif\", interval = 0.2, ani.width = 600)\n\nHere is kde_doy2.gif imported directly through R studio:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Learning Spatial Weights and Applications in R.\n\n\n12 Sep 24: Completed Hands-on Exercise 5.\n16 Sep 24: Updated description."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#description",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#description",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Learning Spatial Weights and Applications in R.\n\n\n12 Sep 24: Completed Hands-on Exercise 5.\n16 Sep 24: Updated description."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-data-and-setting-up-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-data-and-setting-up-r-environment",
    "title": "Hands-on Exercise 5",
    "section": "Importing Data and setting up R Environment",
    "text": "Importing Data and setting up R Environment\nLoading in relevant packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\nImporting data:\n\nhunan = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 = read.csv(\"data/aspatial/HUnan_2012.csv\")\n\nJoining the hunan2012 data with the hunan sf data frame, before getting only relevant fields (County, GDPPC, etc.):\n\nhunan = left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 5",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nUsing a Quick Thematic Map (qtm) plot from tmap package to create a choropleth map, along with a basemap:\n\nbasemap = tm_shape(hunan) + tm_polygons() + tm_text(\"NAME_3\", size = 0.5)\ngdppc = qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp = 1, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 5",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\n\nQueen\nUsage of the poly2nb() of spdep package. This is to explore the QUEEN contiguity based neighbour. As taken from the poly2nb() help page:\nif TRUE, a single shared boundary point meets the contiguity condition, if FALSE, more than one shared point is required; note that more than one shared boundary point does not necessarily mean a shared boundary line\n\nwm_q = poly2nb(hunan, queen = TRUE)\nsummary (wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThis shows there are 88 area units in Hunan. To see a single polygon’s neighbours:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nhunan$County[1] #Get the County name of Polygon 1\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_3[c(2,3,4,57,85)] #Get the name of neighbours\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\nnb1 = hunan$GDPPC[wm_q[[1]]] #Get the GDPPC of the neighbours\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\nstr(wm_q) #display complete weight matrix\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nRook\nThis time, we will use Rook to compute the contiguity weight matrix.\n\nwm_r = poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\nwm_r[[1]] #notice the difference in neighbours\n\n[1]  3  4 57 85\n\n\n\n\nVisualising Contiguity weights\nExtract longitude values\n\nlongitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]]) #[[1]] allows us to get just the longitude, ~ signifies formula\nlatitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords = cbind(longitude, latitude)\nhead(coords) #check the coords to see if formatted correctly\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nNow we can plot the contiguity based neighbour maps:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main = \"Queen\")\nplot(wm_q, coords, pch = 19, cex = 0.8, add = TRUE, col = \"red\") \n#pch = points shape, cex is scaling of plot and symbols relative to each other, add is to add both plots into one\nplot(hunan$geometry, border=\"lightgrey\", main = \"Rook\")\nplot(wm_r, coords, pch = 19, cex = 0.8, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 5",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nUsage of dnearneigh() of spdep package. Identifies the neighbours by Euclidean distance within a distance band of lower and upper bounds.\nFirst, determine upper limit for distance band:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 = knn2nb(knearneigh(coords))\nk1dists = unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nLargest first nearest neighbour is 61.79km, so upper bound 62. Now compute fixed distance weight matrix:\n\nwm_d62 = dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe average number of neighbours a region has is 3.681818. Now we use table() and card() instead of str() to display the content:\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp = n.comp.nb(wm_d62) #Find number of disjointed connected subgraphs\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nPlotting the distance weight matrix, red line shows 1st nearest neighbours, blue lines show neighbours within 62km:\n\nplot(hunan$geometry, border = \"lightgrey\", main = \"Distance Weight Matrix\")\nplot(wm_d62, coords, add = TRUE, col = \"blue\")\nplot(k1, coords, add = TRUE, col = \"red\", length = 0.08)\n\n\n\n\n\n\n\n\nUsing adaptive distance instead, as densely settled areas tend to have more neighbours. We can define the number of neighbours using k-nearest neighbours:\n\nknn6 = knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nPlotting it out:\n\nplot(hunan$geometry, border = \"grey\", main = \"6-nearest neighbours\")\nplot(knn6, coords, add = TRUE, cex = 0.8, col = \"red\", pch = 19)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#weights-based-on-idw",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#weights-based-on-idw",
    "title": "Hands-on Exercise 5",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nDerive a spatial weight matrix based on Inversed Distance method.\n\ndist = nbdists(wm_q, coords, longlat = TRUE) #compute distance between areas\nids = lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#row-standardised-weights-matrix",
    "title": "Hands-on Exercise 5",
    "section": "Row-standardised Weights Matrix",
    "text": "Row-standardised Weights Matrix\nAssigning weights to each neighbouring polygon by assigning the fraction of 1/(# of neighbours). However, it has a drawback where polygons along the edges will base their lagged values on fewer polygons, which may lead to over/under-estimation.\n\nrswm_q = nb2listw(wm_q, style = \"W\", zero.policy = TRUE) #zero.policy allows for list of non-neighbours\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbour is assigned a 0.125 weight. Once the average neighbouring income values are computed, each neighbour’s income is multiplied by 0.125.\n\nrswm_ids = nb2listw(wm_q, glist=ids, style = \"B\", zero.policy = TRUE) #Usage of distance instead of weight\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 5",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\n\nSpatial Lag with Row-Standardized Weights\nCompute the average neighbour GDPPC value:\n\nGDPPC.lag = lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 = hunan$GDPPC[wm_q[[1]]]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\nlag.list = list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res = as.data.frame(lag.list)\ncolnames(lag.res) = c(\"NAME_3\", \"lag GDPPC\")\nhunan = left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot the GDPPC and spatial lag GDPPC:\n\ntmap_arrange(qtm(hunan, \"GDPPC\"), qtm(hunan, \"lag GDPPC\"), asp = 1, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nSpatial Lag as a Sum of Neighbouring Values\nCalculate spatial lag as a sum of neighbouring values by assigning binary weights:\n\nb_weights = lapply(wm_q, function(x) 0*x+1)\nb_weights2 = nb2listw(wm_q, glist = b_weights, style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nlag_sum = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res = as.data.frame(lag_sum)\ncolnames(lag.res) = c(\"NAME_3\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nhunan = left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\ntmap_arrange(qtm(hunan, \"GDPPC\"), qtm(hunan, \"lag_sum GDPPC\"), asp = 1, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nSpatial Window Average\nUses row-standardised weights and includes the diagonal element. To add diagonal element:\n\nwm_qs = include.self(wm_q)\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n\nwm_qs = nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\n\nlag_w_avg_gpdpc = lag.listw(wm_qs, hunan$GDPPC) #create lag variable\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\nlag.list.wm_qs = list (hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res = as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) = c(\"NAME_3\", \"lag_window_avg GDPPC\")\nhunan = left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\nhunan %&gt;% select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nFinally, we plot it:\n\ntmap_arrange(qtm(hunan, \"lag GDPPC\"), qtm(hunan, \"lag_window_avg GDPPC\"), asp = 1, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nSpatial Window Sum\nCounter part of window average, but without using row-standardised weights.\n\nwm_qs = include.self(wm_q) # add diagonal element\nb_weights = lapply(wm_qs, function(x) 0*x+1) # add binary weights\nb_weights2 = nb2listw(wm_qs, glist = b_weights, style = \"B\") # assign weight values\nw_sum_gdppc = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC)) # compute lag variable\nw_sum_gdppc.res = as.data.frame(w_sum_gdppc) # convert to data frame\ncolnames(w_sum_gdppc.res) = c(\"NAME_3\", \"w_sum GDPPC\")\nhunan = left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\nhunan %&gt;% select (\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\ntmap_arrange(qtm(hunan, \"lag_sum GDPPC\"), qtm(hunan, \"w_sum GDPPC\"), asp = 1, ncol = 2)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class Exercise 5",
    "section": "",
    "text": "Learning to perform Spatial Weight and its Applications in R.\n\n\n16 Sep 24: Completed In-Class Exercise 5."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#description",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#description",
    "title": "In-Class Exercise 5",
    "section": "",
    "text": "Learning to perform Spatial Weight and its Applications in R.\n\n\n16 Sep 24: Completed In-Class Exercise 5."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#importing-data-and-packages",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#importing-data-and-packages",
    "title": "In-Class Exercise 5",
    "section": "Importing Data and Packages",
    "text": "Importing Data and Packages\nImport Packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\nImport data and join them, selecting only relevant fields:\n\n# ^ To prevent from re-load during render\nhunan_sf = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\nhunan_2012 = read.csv(\"data/aspatial/HUnan_2012.csv\")\nhunan_sf = left_join(hunan_sf, hunan_2012) %&gt;%\n  select(1:3, 7, 15:16, 31, 32)\n\nWrite into rds format:\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n\nRead rds into R environment:\n\nhunan_sf = read_rds(\"data/rds/hunan_sf.rds\") \n\nConvert into Spatial Polygon Data Frame, as GWmodel is built around sp:\n\nhunan_sp = hunan_sf %&gt;% as_Spatial()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "title": "In-Class Exercise 5",
    "section": "Geographically Weighted Summary Statistics with Adaptive Bandwidth",
    "text": "Geographically Weighted Summary Statistics with Adaptive Bandwidth\nDetermine adaptive bandwidth:\n\n#Cross-validation \nbw_CV = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,  #enable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T  #set to TRUE, transforms data to projected CRS in KM\n                )\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n#AIC\nbw_AIC = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,  #enable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T  #set to TRUE, transforms data to projected CRS in KM\n                )\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\nFixed Bandwidth:\n\n#Cross-validation \nbw_CV_Fix = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,  #disable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T\n                )\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n#AIC\nbw_AIC_Fix = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,  #disable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T\n                )\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\nCompute geographically weighted summary statistics:\n\ngwstat = gwss(data = hunan_sp,\n              vars = \"GDPPC\",\n              bw = bw_AIC,\n              kernel = \"bisquare\",\n              adaptive = TRUE,\n              longlat = T\n              )\n\nPrepare the output data:\n\ngwstat_df = as.data.frame(gwstat$SDF)\n#Append data to original sf file\nhunan_gstat = cbind(hunan_sf, gwstat_df)\n\nVisualising the stats:\n\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 1)+\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.title.size = 1.2,\n            legend.height = 1.5,\n            legend.width = 1.5,\n            frame = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Learning to compute Global and Local Measures of Spatial Autocorrelation in R.\n\n\n16 Sep 24: Created Hands-on Exercise 6.\n18 Sep 24: Completed Hands-on Exercise 6."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#description",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#description",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "Learning to compute Global and Local Measures of Spatial Autocorrelation in R.\n\n\n16 Sep 24: Created Hands-on Exercise 6.\n18 Sep 24: Completed Hands-on Exercise 6."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-data-and-setting-up-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-data-and-setting-up-r-environment",
    "title": "Hands-on Exercise 6",
    "section": "Importing Data and setting up R Environment",
    "text": "Importing Data and setting up R Environment\nLoading in relevant packages:\n\npacman::p_load(sf, tidyverse, tmap, spdep)\n\nLoading in data:\n\nhunan_sf = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\0SMU\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan_2012 = read.csv(\"data/aspatial/Hunan_2012.csv\")\nhunan_sf = left_join(hunan_sf, hunan_2012)\n\nJoining with `by = join_by(County)`\n\n\nReduce the columns to only relevant fields (NAME_2, ID_3, NAME_3, County, GDPPC):\n\nhunan_sf = hunan_sf %&gt;% select(1:3, 7, 15)\n\nVisualising the regional development indicator (GDP per Capita):\n\nequal = tm_shape(hunan_sf) +\n  tm_fill(\"GDPPC\", n = 5, style = \"equal\") +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"Equal interval classification\",\n            main.title.size = 1)\n\nquantile = tm_shape(hunan_sf) +\n  tm_fill(\"GDPPC\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"Equal quantile classification\",\n            main.title.size = 1)\n\ntmap_arrange(equal, quantile, ncol = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#global-measures-of-spatial-autocorrelation",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation",
    "text": "Global Measures of Spatial Autocorrelation\nCompute Contiguity Spatial Weights using poly2nb:\n\nwm_q = poly2nb(hunan_sf, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nCompute the Row-standardised weights matrix:\n\nrswm_q = nb2listw(wm_q, \n                  style = \"W\", \n                  zero.policy = TRUE #Add weights of zero length for regions without neighbours\n                  )\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nMoran’s I\nPerform Moran’s I statistics testing:\n\nmoran.test(hunan_sf$GDPPC,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan_sf$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n#na.omit to remove all \"NA\"(s) in the data\n\nA positive Moran I value is observed, suggesting potential clustering in GDPPC data. It could suggest that counties with similar GDPPC tend to be close to each other.\nPerform Monte Carlo Moran’s I:\n\nset.seed(1234)\nbperm = moran.mc(hunan_sf$GDPPC,\n                 listw = rswm_q,\n                 nsim = 999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan_sf$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nAs the p-value &lt; 0.05, we can reject the null hypothesis of complete spatial randomness (CSR).\nPlotting and visualising the results:\n\nhist(bperm$res, freq = TRUE, breaks = 20, xlab = \"Simulated Moran's I\")\nabline(v=0, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nGeary’s C\nPerform Geary’s C test:\n\ngeary.test(hunan_sf$GDPPC, listw = rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan_sf$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nAs the Geary C value is less than 1, we can draw the same conclusion as in the Moran’s I test: There is signs of clustering between the counties’ GDPPC values.\nPerform Monte Carlo test for Geary’s C:\n\nset.seed(1234)\nbperm_geary = geary.mc(hunan_sf$GDPPC,\n                       listw = rswm_q,\n                       nsim = 999)\nbperm_geary\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan_sf$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nOnce again, with p-value &lt; 0.05, we can reject the null hypothesis of CSR.\nVisualising the Monte Carlo results for Geary’s C:\n\nhist(bperm_geary$res, freq = TRUE, breaks = 20, xlab = \"Simulated Geary C\")\nabline(v=1, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nSpatial Correlogram\nSpatial correlograms show how correlated are pairs of spatial observations when you increase the distance(lag) between them.\nCompute Moran’s I correlogram:\n\nMI_corr = sp.correlogram(wm_q,\n                         hunan_sf$GDPPC,\n                         order = 6,\n                         method = \"I\",\n                         style = \"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nPlotting may not give a complete interpretation, as not all values are statistically significant. We must examine the full analysis report:\n\nprint(MI_corr)\n\nSpatial correlogram for hunan_sf$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWe can do the same for Geary’s C:\n\nGC_corr = sp.correlogram(wm_q,\n                         hunan_sf$GDPPC,\n                         order = 6,\n                         method = \"C\",\n                         style = \"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan_sf$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFrom both, we can see as we increase lag, we do see a shift of values towards the neutral (I = 0, C = 1), signifying the distribution of GDPPR to be closer to CSR with a large enough lag."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#local-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#local-measures-of-spatial-autocorrelation",
    "title": "Hands-on Exercise 6",
    "section": "Local Measures of Spatial Autocorrelation",
    "text": "Local Measures of Spatial Autocorrelation\n\nLocal Indicators of Spatial Association (LISA)\nComputing of Contiguity Spatial Weights and Row-Standardised Weight Matrix already done under Global Measures. We can use the same computation to compute the local Moran’s I:\n\nfips = order(hunan_sf$County)\nlocalMI = localmoran(hunan_sf$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nUse printCoefmat() to list the local Moran matrix:\n\nprintCoefmat(data.frame(\n  localMI[fips,],\n  row.names = hunan_sf$County[fips]),\n  check.names = FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\nAppending the local Moran’s I onto the Hunan data frame:\n\nhunan.localMI = cbind(hunan_sf, localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nNow we can map the local Moran’s I values and the p-values using tmap:\n\nlocalMI.map = tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\",\n          style = \"pretty\",\n          palette = \"GnBu\",\n          title = \"Local Moran's I stats\") +\n  tm_borders(alpha = 1)\n\npvalue.map = tm_shape(hunan.localMI) +\n  tm_fill(\n    col = \"Pr.Ii\",\n    breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n    palette = \"-Oranges\",\n    title = \"Local Moran's I p-values\"\n  ) + tm_borders(alpha = 1)\n\ntmap_arrange(localMI.map, pvalue.map, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nCreating a LISA Cluster Map\nMoran scatterplot shows the relationship between the values of each location and the average value at neighbouring locations:\n\nnci = moran.plot(hunan_sf$GDPPC, rswm_q,\n                 labels = as.character(hunan_sf$County),\n                 xlab = \"GDPPC 2012\",\n                 ylab = \"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\nThe area is split into 4 quadrant: The top right is for areas that have high GDPPC and are surrounded by other areas that have average level of GDPPC.\nNow to plot a Moran scatterplot with standardised variable, we first use scale() to center and scale the variable:\n\nhunan_sf$Z.GDPPC = scale(hunan_sf$GDPPC) %&gt;% as.vector()\nnci2 = moran.plot(hunan_sf$Z.GDPPC, rswm_q,\n                  labels = as.character(hunan_sf$County),\n                  xlab = \"z-GDPPC 2012\",\n                  ylab = \"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\nNow we will prepare the LISA map classes:\n\nquadrant = vector(mode = \"numeric\", length = nrow(localMI))\n\n#Derive spatially lagged variable and center it around its mean\nhunan_sf$lag_GDPPC = lag.listw(rswm_q, hunan_sf$GDPPC)\nDV = hunan_sf$lag_GDPPC - mean(hunan_sf$lag_GDPPC)\n\n#Center the local Moran's aroudn the mean\nLM_I = localMI[,1] - mean(localMI[,1])\n\n#Set statistical significance level\nsignif = 0.05\n\n#define the low-low to high-high categories\nquadrant[DV&lt;0 & LM_I&gt;0] = 1\nquadrant[DV&gt;0 & LM_I&lt;0] = 2\nquadrant[DV&lt;0 & LM_I&lt;0] = 3  \nquadrant[DV&gt;0 & LM_I&gt;0] = 4\n\n#place non-significant Moran in cat 0\nquadrant[localMI[,5]&gt;signif] = 0\n\nPlot the LISA map:\n\nhunan.localMI$quadrant = quadrant\ncolours = c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap = tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\",\n          style = \"cat\",\n          palette = colours[c(sort(unique(quadrant)))+1],\n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_borders(alpha = 1)\n\ntmap_arrange(localMI.map, LISAmap, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nHot & Cold Spot Area Analysis\nDerive the centroid coordinates using st_centroid:\n\nlongitude = map_dbl(hunan_sf$geometry, ~st_centroid(.x)[[1]])\nlatitude = map_dbl(hunan_sf$geometry, ~st_centroid(.x)[[2]])\ncoords = cbind(longitude, latitude)\n\nDetermine the cut-off distance (upper limit):\n\nk1 = knn2nb(knearneigh(coords))\nk1dist = unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dist)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe upper limit is 61.79km, so we can calculate the fixed distance as 62km:\n\nwm_d62 = dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nwm62_lw = nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nUsing adaptive distance to calculate another weight matrix:\n\nknn = knn2nb(knearneigh(coords, k = 8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nThe adaptive has been set to have the average number of k=8 neighbours. Covert this into spatial weights object:\n\nknn_lw = nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\nComputing Gi Statistics\nUsing fixed distance:\n\ngi.fixed = localG(hunan_sf$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan_sf$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nGi statistics is represented as a Z-score, where greater values = greater intensity of clustering, and direction (positive/negative) indicates high/low clusters.\n\nhunan.gi = cbind(hunan_sf, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nNow we can plot it out, next to the normal values:\n\nGimap = tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 1)\n\ntmap_arrange(qtm(hunan_sf, \"GDPPC\"), Gimap, ncol = 2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nUsing adaptive distance:\n\ngi.adaptive = localG(hunan_sf$GDPPC, knn_lw)\nhunan.gi = cbind(hunan_sf, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nGimap = tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_adaptive\",\n          style = \"pretty\",\n          palette = \"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 1)\n\ntmap_arrange(qtm(hunan_sf, \"GDPPC\"), Gimap, ncol = 2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Armed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.\nWe will be diving into the armed conflict in Myanmar, following the army’s coup that lead to Myanmar’s military rule in 2021, where Myanmar’s previous leader, Aung San Suu Kyi, was placed under arrest (Maizland, 2022). This has lead to civilian killings and arrest for those opposing the military, leading to over 10,000 detainees since the 2021 coup, according to a United Nation report (Farge & Mantovani, 2024). Specifically, we will be looking at the trends of violence shown in Myanmar and try to explain any patterns observed."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#background",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#background",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Armed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.\nWe will be diving into the armed conflict in Myanmar, following the army’s coup that lead to Myanmar’s military rule in 2021, where Myanmar’s previous leader, Aung San Suu Kyi, was placed under arrest (Maizland, 2022). This has lead to civilian killings and arrest for those opposing the military, leading to over 10,000 detainees since the 2021 coup, according to a United Nation report (Farge & Mantovani, 2024). Specifically, we will be looking at the trends of violence shown in Myanmar and try to explain any patterns observed."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#the-data",
    "title": "Take-Home Exercise 1",
    "section": "The Data",
    "text": "The Data\n\nArmed conflict data\nFor the purpose of this assignment, armed conflict data of Myanmar between 2021-2024 from Armed Conflict Location & Event Data (ACLED), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world, is used.\n\n\nGIS Data\nI have taken the Mynamar District Boundaries (Admin2) from https://geonode.themimu.info/layers/geonode%3Ammr_polbnda_adm2_250k_mimu"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-packages-and-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-packages-and-data",
    "title": "Take-Home Exercise 1",
    "section": "Importing Packages and Data",
    "text": "Importing Packages and Data\nBefore we start, we need to import the data and ensure we modify it as needed. Firstly, we start of by loading in the relevant packages that will be needed.\n\npacman::p_load(sf, tidyverse, tmap, raster, spatstat, sparr, animation)\n\nNow, we can load in our data. Let’s start with the data from ACLED.\n\nacled_sf = read_csv(\"data/raw/2021-01-01-2024-06-30-Southeast_Asia-Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date)) %&gt;%\n  mutate(event_quarter = quarter(event_date)) %&gt;%\n  mutate(event_year = year(event_date)) \n\nAbove we have taken the data and transformed it into a sf data frame using st_as_sf, before transforming it to the projection of WGS 84 / UTM zone 47N, one of the projection CRS for Myanmar. I have also modified the event_date field to be in a Date format for R to recognise it as a date, before adding in 2 additional fields: the year of the event (event_year), and which quarter of the year the event takes place (event_quarter).\nNow, let us import the boundary data.\n\nmimu_sub = st_read(dsn = \"data/raw/MIMU_District_Admin2\",\n                   layer = \"mmr_polbnda_adm2_250k_mimu\") \n\nNow we have the boundary data, but we need to verify its CRS.\n\nst_crs(mimu_sub)\n\nThe data is projected to 4326, which is the standard for WGS 84. We should project it to 32647 as well.\n\nmimu_sub = st_transform(mimu_sub, crs = 32647)\n\nIn order to preserve the CRS transformation and mutation of data, I shall write them into an rds file. This reduces the need to continually transform them every time this page is rendered.\n\nwrite_rds(acled_sf, \"data/rds/acled_sf.rds\")\nwrite_rds(mimu_sub, \"data/rds/mimu_sub.rds\")\n\nWith the files written, I can put “eval: false” on the above code chunks. From now on, we will simply need to read the rds files to obtain back the data.\n\nacled_sf = read_rds(\"data/rds/acled_sf.rds\")\nmimu_sub = read_rds(\"data/rds/mimu_sub.rds\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling",
    "title": "Take-Home Exercise 1",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nFiltering Data\nFirstly, let us divide the ACLED data into its respective year and quarters. This is done through filtering the event_year and event_quarter\n\nacled_sf_21_Q1 = acled_sf %&gt;% filter(event_year == 2021, event_quarter == 1)\nacled_sf_21_Q2 = acled_sf %&gt;% filter(event_year == 2021, event_quarter == 2)\nacled_sf_21_Q3 = acled_sf %&gt;% filter(event_year == 2021, event_quarter == 3)\nacled_sf_21_Q4 = acled_sf %&gt;% filter(event_year == 2021, event_quarter == 4)\n\nacled_sf_22_Q1 = acled_sf %&gt;% filter(event_year == 2022, event_quarter == 1)\nacled_sf_22_Q2 = acled_sf %&gt;% filter(event_year == 2022, event_quarter == 2)\nacled_sf_22_Q3 = acled_sf %&gt;% filter(event_year == 2022, event_quarter == 3)\nacled_sf_22_Q4 = acled_sf %&gt;% filter(event_year == 2022, event_quarter == 4)\n\nacled_sf_23_Q1 = acled_sf %&gt;% filter(event_year == 2023, event_quarter == 1)\nacled_sf_23_Q2 = acled_sf %&gt;% filter(event_year == 2023, event_quarter == 2)\nacled_sf_23_Q3 = acled_sf %&gt;% filter(event_year == 2023, event_quarter == 3)\nacled_sf_23_Q4 = acled_sf %&gt;% filter(event_year == 2023, event_quarter == 4)\n\nacled_sf_24_Q1 = acled_sf %&gt;% filter(event_year == 2024, event_quarter == 1)\nacled_sf_24_Q2 = acled_sf %&gt;% filter(event_year == 2024, event_quarter == 2)\n\nNow, for future reference, let us do a count of the types of events. The input “sort = TRUE” will arrange it in a descending order\n\nacled_sf %&gt;% count(event_type, sort = TRUE)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 3\n  event_type                     n                                      geometry\n* &lt;chr&gt;                      &lt;int&gt;                              &lt;MULTIPOINT [m]&gt;\n1 Explosions/Remote violence 12208 ((-208804.4 2357274), (-206931.7 2359490), (…\n2 Strategic developments     12126 ((-206931.7 2359490), (-201788.2 2366580), (…\n3 Battles                    12049 ((-207135 2358896), (-206931.7 2359490), (-2…\n4 Protests                    8829 ((-191409.1 2317222), (-174344.6 2321971), (…\n5 Violence against civilians  6225 ((-206931.7 2359490), (-204784 2358873), (-2…\n6 Riots                        116 ((-21578.24 2371638), (275.0944 2569257), (2…\n\n\nAs we can see, out of the 6 event types, there seem to be less riots. As such, we will not be focusing as much on that and instead be focused more on the other 5 event types. I will import them as their own sf data frames.\n\nprotests_sf = acled_sf %&gt;% filter(event_type == \"Protests\")\nbattles_sf = acled_sf %&gt;% filter(event_type == \"Battles\")\ndevelop_sf = acled_sf %&gt;% filter(event_type == \"Strategic developments\")\nviolence_sf = acled_sf %&gt;% filter(event_type == \"Violence against civilians\")\nexplosions_sf = acled_sf %&gt;% filter(event_type == \"Explosions/Remote violence\")\n\n\n\nCreating ppp and owin objects\nIn order to use the data, we need to transform them into ppp objects.\n\nacled_ppp = as.ppp(acled_sf)\n\nWarning in as.ppp.sf(acled_sf): only first attribute column is used for marks\n\nacled_ppp_21_Q1 = as.ppp(acled_sf_21_Q1)\n\nWarning in as.ppp.sf(acled_sf_21_Q1): only first attribute column is used for\nmarks\n\nacled_ppp_21_Q2 = as.ppp(acled_sf_21_Q2)\n\nWarning in as.ppp.sf(acled_sf_21_Q2): only first attribute column is used for\nmarks\n\nacled_ppp_21_Q3 = as.ppp(acled_sf_21_Q3)\n\nWarning in as.ppp.sf(acled_sf_21_Q3): only first attribute column is used for\nmarks\n\nacled_ppp_21_Q4 = as.ppp(acled_sf_21_Q4)\n\nWarning in as.ppp.sf(acled_sf_21_Q4): only first attribute column is used for\nmarks\n\nacled_ppp_22_Q1 = as.ppp(acled_sf_22_Q1)\n\nWarning in as.ppp.sf(acled_sf_22_Q1): only first attribute column is used for\nmarks\n\nacled_ppp_22_Q2 = as.ppp(acled_sf_22_Q2)\n\nWarning in as.ppp.sf(acled_sf_22_Q2): only first attribute column is used for\nmarks\n\nacled_ppp_22_Q3 = as.ppp(acled_sf_22_Q3)\n\nWarning in as.ppp.sf(acled_sf_22_Q3): only first attribute column is used for\nmarks\n\nacled_ppp_22_Q4 = as.ppp(acled_sf_22_Q4)\n\nWarning in as.ppp.sf(acled_sf_22_Q4): only first attribute column is used for\nmarks\n\nacled_ppp_23_Q1 = as.ppp(acled_sf_23_Q1)\n\nWarning in as.ppp.sf(acled_sf_23_Q1): only first attribute column is used for\nmarks\n\nacled_ppp_23_Q2 = as.ppp(acled_sf_23_Q2)\n\nWarning in as.ppp.sf(acled_sf_23_Q2): only first attribute column is used for\nmarks\n\nacled_ppp_23_Q3 = as.ppp(acled_sf_23_Q3)\n\nWarning in as.ppp.sf(acled_sf_23_Q3): only first attribute column is used for\nmarks\n\nacled_ppp_23_Q4 = as.ppp(acled_sf_23_Q4)\n\nWarning in as.ppp.sf(acled_sf_23_Q4): only first attribute column is used for\nmarks\n\nacled_ppp_24_Q1 = as.ppp(acled_sf_24_Q1)\n\nWarning in as.ppp.sf(acled_sf_24_Q1): only first attribute column is used for\nmarks\n\nacled_ppp_24_Q2 = as.ppp(acled_sf_24_Q2)\n\nWarning in as.ppp.sf(acled_sf_24_Q2): only first attribute column is used for\nmarks\n\n\nNow, we will create the owin object using our boundary data, and attach it to the ppp objects.\n\nmimu_sub_owin = as.owin(mimu_sub)\n\nmm_ppp_21_Q1 = acled_ppp_21_Q1[mimu_sub_owin] \nmm_ppp_21_Q2 = acled_ppp_21_Q2[mimu_sub_owin]\nmm_ppp_21_Q3 = acled_ppp_21_Q3[mimu_sub_owin]\nmm_ppp_21_Q4 = acled_ppp_21_Q4[mimu_sub_owin]\n\nmm_ppp_22_Q1 = acled_ppp_22_Q1[mimu_sub_owin] \nmm_ppp_22_Q2 = acled_ppp_22_Q2[mimu_sub_owin]\nmm_ppp_22_Q3 = acled_ppp_22_Q3[mimu_sub_owin]\nmm_ppp_22_Q4 = acled_ppp_22_Q4[mimu_sub_owin]\n\nmm_ppp_23_Q1 = acled_ppp_23_Q1[mimu_sub_owin] \nmm_ppp_23_Q2 = acled_ppp_23_Q2[mimu_sub_owin]\nmm_ppp_23_Q3 = acled_ppp_23_Q3[mimu_sub_owin]\nmm_ppp_23_Q4 = acled_ppp_23_Q4[mimu_sub_owin]\n\nmm_ppp_24_Q1 = acled_ppp_24_Q1[mimu_sub_owin] \nmm_ppp_24_Q2 = acled_ppp_24_Q2[mimu_sub_owin]\n\nAs the data will be in meters, I will re-scale them to km, this is for the KDE layers.\n\nmm_ppp_21_Q1.km &lt;- rescale.ppp(mm_ppp_21_Q1, 1000, \"km\")\nmm_ppp_21_Q2.km &lt;- rescale.ppp(mm_ppp_21_Q2, 1000, \"km\")\nmm_ppp_21_Q3.km &lt;- rescale.ppp(mm_ppp_21_Q3, 1000, \"km\")\nmm_ppp_21_Q4.km &lt;- rescale.ppp(mm_ppp_21_Q4, 1000, \"km\")\n\nmm_ppp_22_Q1.km &lt;- rescale.ppp(mm_ppp_22_Q1, 1000, \"km\")\nmm_ppp_22_Q2.km &lt;- rescale.ppp(mm_ppp_22_Q2, 1000, \"km\")\nmm_ppp_22_Q3.km &lt;- rescale.ppp(mm_ppp_22_Q3, 1000, \"km\")\nmm_ppp_22_Q4.km &lt;- rescale.ppp(mm_ppp_22_Q4, 1000, \"km\")\n\nmm_ppp_23_Q1.km &lt;- rescale.ppp(mm_ppp_23_Q1, 1000, \"km\")\nmm_ppp_23_Q2.km &lt;- rescale.ppp(mm_ppp_23_Q2, 1000, \"km\")\nmm_ppp_23_Q3.km &lt;- rescale.ppp(mm_ppp_23_Q3, 1000, \"km\")\nmm_ppp_23_Q4.km &lt;- rescale.ppp(mm_ppp_23_Q4, 1000, \"km\")\n\nmm_ppp_24_Q1.km &lt;- rescale.ppp(mm_ppp_24_Q1, 1000, \"km\")\nmm_ppp_24_Q2.km &lt;- rescale.ppp(mm_ppp_24_Q2, 1000, \"km\")\n\nNow, using the main ACLED data, we can check for duplicates.\n\nany(duplicated(acled_ppp))\n\n[1] FALSE\n\n\nThere seems to be no duplicates, which allows us to continue using the data and its subsets. I will grab a quarter and plot it out to see how it looks like.\n\nplot(mm_ppp_21_Q1)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 3694 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\nAs we can see, there is a lot of data for just 1 quarter. However, some patterns are already visible, such as the heavy amount of events happening in the centre of Myanmar. To get a better look of this, we should derive the KDE layers."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-kde-layers",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-kde-layers",
    "title": "Take-Home Exercise 1",
    "section": "Computing KDE Layers",
    "text": "Computing KDE Layers\n\nTesting Kernel Methods\nLet us compute the KDE for Myanmar’s ACLED data using bw.diggle.\n\nkde_mm_21_Q1.bw = density(mm_ppp_21_Q1.km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_mm_21_Q1.bw)\n\n\n\n\n\n\n\n\nThe data is not visible, using bw.diggle to get the bandwidth is not sufficient. We need to test out using a larger bandwidth. Here I attempt to use the adaptive.density() method:\n\nmm_adaptive = adaptive.density(mm_ppp_21_Q1, method=\"kernel\")\nplot(mm_adaptive)\n\n\n\n\n\n\n\n\nThe data is still not visible. we should find the larger sigma value using adaptive bandwidth methods.\n\nkde_mm_21_Q1.ppl = density(mm_ppp_21_Q1.km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\")\nkde_mm_21_Q1.CvL = density(mm_ppp_21_Q1.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_21_Q1.scott = density(mm_ppp_21_Q1.km, sigma = bw.scott, edge = TRUE, kernel = \"gaussian\")\npar(mfrow=c(2,2))\nplot(kde_mm_21_Q1.ppl)\nplot(kde_mm_21_Q1.CvL)\nplot(kde_mm_21_Q1.scott)\n\n\n\n\n\n\n\n\nWe do see more representation using bw.scott() and bw.CvL(), and I will elect to use the bw.CvL for the remaining KDE Layers for better clarity of the data.\n\n\nPlotting monthly KDE Layers\nI shall use bw.CvL() for the remaining quarterly KDE layers.\n\nkde_mm_21_Q1.CvL = density(mm_ppp_21_Q1.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_21_Q2.CvL = density(mm_ppp_21_Q2.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_21_Q3.CvL = density(mm_ppp_21_Q3.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_21_Q4.CvL = density(mm_ppp_21_Q4.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\npar(mfrow = c(2,2))\nplot(kde_mm_21_Q1.CvL)\nplot(kde_mm_21_Q2.CvL)\nplot(kde_mm_21_Q3.CvL)\nplot(kde_mm_21_Q4.CvL)\nmtext(\"Myanmar Conflict 2021\", side = 3, line = -2, outer = TRUE)\n\n\n\n\n\n\n\n\n\nkde_mm_22_Q1.CvL = density(mm_ppp_22_Q1.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_22_Q2.CvL = density(mm_ppp_22_Q2.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_22_Q3.CvL = density(mm_ppp_22_Q3.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_22_Q4.CvL = density(mm_ppp_22_Q4.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\npar(mfrow = c(2,2))\nplot(kde_mm_22_Q1.CvL)\nplot(kde_mm_22_Q2.CvL)\nplot(kde_mm_22_Q3.CvL)\nplot(kde_mm_22_Q4.CvL)\nmtext(\"Myanmar Conflict 2022\", side = 3, line = -1, outer = TRUE)\n\n\n\n\n\n\n\n\n\nkde_mm_23_Q1.CvL = density(mm_ppp_23_Q1.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_23_Q2.CvL = density(mm_ppp_23_Q2.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_23_Q3.CvL = density(mm_ppp_23_Q3.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_23_Q4.CvL = density(mm_ppp_23_Q4.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\npar(mfrow = c(2,2))\nplot(kde_mm_23_Q1.CvL)\nplot(kde_mm_23_Q2.CvL)\nplot(kde_mm_23_Q3.CvL)\nplot(kde_mm_23_Q4.CvL)\nmtext(\"Myanmar Conflict 2023\", side = 3, line = -2, outer = TRUE)\n\n\n\n\n\n\n\n\n\nkde_mm_24_Q1.CvL = density(mm_ppp_24_Q1.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\nkde_mm_24_Q2.CvL = density(mm_ppp_24_Q2.km, sigma = bw.CvL, edge = TRUE, kernel = \"gaussian\")\npar(mfrow = c(1,2))\nplot(kde_mm_24_Q1.CvL)\nplot(kde_mm_24_Q2.CvL)\nmtext(\"Myanmar Conflict 2024\", side = 3, line = -2, outer = TRUE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatial-point-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatial-point-analysis",
    "title": "Take-Home Exercise 1",
    "section": "2nd Order Spatial Point Analysis",
    "text": "2nd Order Spatial Point Analysis\nBased on the observations above, we can see how there is high clustering of events occurring within Myanmar. This is particular around 2023, Q2, where events seem to be highly clustered around 2 areas. However, we see a further spread of such events across 2023, Q4, before it eventually starts to reduce in 2024. We should observe the movement of these events in 2 ways:\n\nHow much clustering do we see from 2023 Q2 to Q4? This will show the movement of events occurring,\nWhat are the event types that are moving? This could help us visualise the pattern of attacks.\n\nOur second point can be visualised through spatio-temporal point pattern analysis. Now using 2nd order spatial point analysis, we can observe our first point. This will be done using G-Function. F-function will not give us a complete picture, while K and L-functions are too computationally expensive.\n\nacled_sf %&gt;% filter(event_year == 2023) %&gt;% count(event_quarter)\n\nSimple feature collection with 4 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -206931.7 ymin: 1103500 xmax: 604775.1 ymax: 3027042\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 4 × 3\n  event_quarter     n                                                   geometry\n*         &lt;int&gt; &lt;int&gt;                                           &lt;MULTIPOINT [m]&gt;\n1             1  3368 ((-199243.8 2366471), (-191409.1 2317222), (-178063.2 229…\n2             2  2921 ((-191261.5 2351144), (-187696.5 2324700), (-174344.6 232…\n3             3  3200 ((-197883.4 2339678), (-196507.9 2341782), (-193232 23463…\n4             4  3753 ((-206931.7 2359490), (-204784 2358873), (-202989.4 23568…\n\n\nBased on the count, we do see a growth in the number of events occuring from Q2 to Q4. Now, we shall calculate the envelope and see how the observed data compares. This will be done using G-Function.\n\nG_mm_23_Q2.csr = envelope(mm_ppp_23_Q2.km, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2,  [3:29 remaining] 3,\n [3:31 remaining] 4,  [3:30 remaining] 5,  [3:27 remaining] 6,\n [3:25 remaining] 7,  [3:24 remaining] 8,  [3:22 remaining] 9,\n [3:24 remaining] 10,  [3:22 remaining] 11,  [3:19 remaining] 12,\n [3:16 remaining] 13,  [3:14 remaining] 14,  [3:12 remaining] 15,\n [3:09 remaining] 16,  [3:07 remaining] 17,  [3:04 remaining] 18,\n [3:01 remaining] 19,  [2:59 remaining] 20,  [2:56 remaining] 21,\n [2:54 remaining] 22,  [2:52 remaining] 23,  [2:50 remaining] 24,\n [2:47 remaining] 25,  [2:45 remaining] 26,  [2:42 remaining] 27,\n [2:40 remaining] 28,  [2:38 remaining] 29,  [2:35 remaining] 30,\n [2:33 remaining] 31,  [2:30 remaining] 32,  [2:28 remaining] 33,\n [2:26 remaining] 34,  [2:23 remaining] 35,  [2:21 remaining] 36,\n [2:19 remaining] 37,  [2:17 remaining] 38,  [2:15 remaining] 39,\n [2:12 remaining] 40,  [2:10 remaining] 41,  [2:08 remaining] 42,\n [2:05 remaining] 43,  [2:03 remaining] 44,  [2:01 remaining] 45,\n [1:58 remaining] 46,  [1:56 remaining] 47,  [1:54 remaining] 48,\n [1:52 remaining] 49,  [1:50 remaining] 50,  [1:47 remaining] 51,\n [1:45 remaining] 52,  [1:43 remaining] 53,  [1:41 remaining] 54,\n [1:38 remaining] 55,  [1:36 remaining] 56,  [1:34 remaining] 57,\n [1:32 remaining] 58,  [1:29 remaining] 59,  [1:27 remaining] 60,\n [1:25 remaining] 61,  [1:23 remaining] 62,  [1:21 remaining] 63,\n [1:19 remaining] 64,  [1:16 remaining] 65,  [1:14 remaining] 66,\n [1:12 remaining] 67,  [1:10 remaining] 68,  [1:08 remaining] 69,\n [1:05 remaining] 70,  [1:03 remaining] 71,  [1:01 remaining] 72,\n [59 sec remaining] 73,  [57 sec remaining] 74,  [54 sec remaining] 75,\n [52 sec remaining] 76,  [50 sec remaining] 77,  [48 sec remaining] 78,\n [46 sec remaining] 79,  [43 sec remaining] 80,  [41 sec remaining] 81,\n [39 sec remaining] 82,  [37 sec remaining] 83,  [35 sec remaining] 84,\n [33 sec remaining] 85,  [30 sec remaining] 86,  [28 sec remaining] 87,\n [26 sec remaining] 88,  [24 sec remaining] 89,  [22 sec remaining] 90,\n [20 sec remaining] 91,  [17 sec remaining] 92,  [15 sec remaining] 93,\n [13 sec remaining] 94,  [11 sec remaining] 95,  [9 sec remaining] 96,\n [7 sec remaining] 97,  [4 sec remaining] 98,  [2 sec remaining] \n99.\n\nDone.\n\nG_mm_23_Q3.csr = envelope(mm_ppp_23_Q3.km, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2,  [3:44 remaining] 3,\n [3:44 remaining] 4,  [3:40 remaining] 5,  [3:38 remaining] 6,\n [3:35 remaining] 7,  [3:32 remaining] 8,  [3:30 remaining] 9,\n [3:27 remaining] 10,  [3:25 remaining] 11,  [3:26 remaining] 12,\n [3:23 remaining] 13,  [3:20 remaining] 14,  [3:18 remaining] 15,\n [3:15 remaining] 16,  [3:13 remaining] 17,  [3:11 remaining] 18,\n [3:08 remaining] 19,  [3:06 remaining] 20,  [3:04 remaining] 21,\n [3:01 remaining] 22,  [2:59 remaining] 23,  [2:57 remaining] 24,\n [2:55 remaining] 25,  [2:53 remaining] 26,  [2:50 remaining] 27,\n [2:48 remaining] 28,  [2:45 remaining] 29,  [2:43 remaining] 30,\n [2:41 remaining] 31,  [2:38 remaining] 32,  [2:36 remaining] 33,\n [2:34 remaining] 34,  [2:31 remaining] 35,  [2:29 remaining] 36,\n [2:27 remaining] 37,  [2:25 remaining] 38,  [2:22 remaining] 39,\n [2:20 remaining] 40,  [2:18 remaining] 41,  [2:15 remaining] 42,\n [2:13 remaining] 43,  [2:11 remaining] 44,  [2:08 remaining] 45,\n [2:06 remaining] 46,  [2:04 remaining] 47,  [2:01 remaining] 48,\n [1:59 remaining] 49,  [1:57 remaining] 50,  [1:55 remaining] 51,\n [1:52 remaining] 52,  [1:50 remaining] 53,  [1:48 remaining] 54,\n [1:45 remaining] 55,  [1:43 remaining] 56,  [1:40 remaining] 57,\n [1:38 remaining] 58,  [1:36 remaining] 59,  [1:33 remaining] 60,\n [1:31 remaining] 61,  [1:29 remaining] 62,  [1:27 remaining] 63,\n [1:24 remaining] 64,  [1:22 remaining] 65,  [1:20 remaining] 66,\n [1:17 remaining] 67,  [1:15 remaining] 68,  [1:13 remaining] 69,\n [1:10 remaining] 70,  [1:08 remaining] 71,  [1:06 remaining] 72,\n [1:03 remaining] 73,  [1:01 remaining] 74,  [59 sec remaining] 75,\n [56 sec remaining] 76,  [54 sec remaining] 77,  [52 sec remaining] 78,\n [49 sec remaining] 79,  [47 sec remaining] 80,  [45 sec remaining] 81,\n [42 sec remaining] 82,  [40 sec remaining] 83,  [38 sec remaining] 84,\n [35 sec remaining] 85,  [33 sec remaining] 86,  [31 sec remaining] 87,\n [28 sec remaining] 88,  [26 sec remaining] 89,  [23 sec remaining] 90,\n [21 sec remaining] 91,  [19 sec remaining] 92,  [16 sec remaining] 93,\n [14 sec remaining] 94,  [12 sec remaining] 95,  [9 sec remaining] 96,\n [7 sec remaining] 97,  [5 sec remaining] 98,  [2 sec remaining] \n99.\n\nDone.\n\nG_mm_23_Q4.csr = envelope(mm_ppp_23_Q4.km, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2,  [4:23 remaining] 3,\n [4:18 remaining] 4,  [4:15 remaining] 5,  [4:12 remaining] 6,\n [4:11 remaining] 7,  [4:08 remaining] 8,  [4:07 remaining] 9,\n [4:10 remaining] 10,  [4:07 remaining] 11,  [4:03 remaining] 12,\n [4:00 remaining] 13,  [3:57 remaining] 14,  [3:54 remaining] 15,\n [3:51 remaining] 16,  [3:49 remaining] 17,  [3:46 remaining] 18,\n [3:42 remaining] 19,  [3:39 remaining] 20,  [3:38 remaining] 21,\n [3:35 remaining] 22,  [3:32 remaining] 23,  [3:29 remaining] 24,\n [3:26 remaining] 25,  [3:23 remaining] 26,  [3:20 remaining] 27,\n [3:17 remaining] 28,  [3:14 remaining] 29,  [3:11 remaining] 30,\n [3:09 remaining] 31,  [3:06 remaining] 32,  [3:04 remaining] 33,\n [3:01 remaining] 34,  [2:58 remaining] 35,  [2:55 remaining] 36,\n [2:52 remaining] 37,  [2:50 remaining] 38,  [2:47 remaining] 39,\n [2:44 remaining] 40,  [2:41 remaining] 41,  [2:38 remaining] 42,\n [2:36 remaining] 43,  [2:33 remaining] 44,  [2:30 remaining] 45,\n [2:28 remaining] 46,  [2:25 remaining] 47,  [2:22 remaining] 48,\n [2:19 remaining] 49,  [2:16 remaining] 50,  [2:14 remaining] 51,\n [2:11 remaining] 52,  [2:08 remaining] 53,  [2:05 remaining] 54,\n [2:03 remaining] 55,  [2:00 remaining] 56,  [1:57 remaining] 57,\n [1:54 remaining] 58,  [1:52 remaining] 59,  [1:49 remaining] 60,\n [1:46 remaining] 61,  [1:43 remaining] 62,  [1:41 remaining] 63,\n [1:38 remaining] 64,  [1:35 remaining] 65,  [1:32 remaining] 66,\n [1:30 remaining] 67,  [1:27 remaining] 68,  [1:24 remaining] 69,\n [1:21 remaining] 70,  [1:19 remaining] 71,  [1:16 remaining] 72,\n [1:13 remaining] 73,  [1:10 remaining] 74,  [1:08 remaining] 75,\n [1:05 remaining] 76,  [1:02 remaining] 77,  [1:00 remaining] 78,\n [57 sec remaining] 79,  [54 sec remaining] 80,  [52 sec remaining] 81,\n [49 sec remaining] 82,  [46 sec remaining] 83,  [43 sec remaining] 84,\n [41 sec remaining] 85,  [38 sec remaining] 86,  [35 sec remaining] 87,\n [33 sec remaining] 88,  [30 sec remaining] 89,  [27 sec remaining] 90,\n [24 sec remaining] 91,  [22 sec remaining] 92,  [19 sec remaining] 93,\n [16 sec remaining] 94,  [14 sec remaining] 95,  [11 sec remaining] 96,\n [8 sec remaining] 97,  [5 sec remaining] 98,  [3 sec remaining] \n99.\n\nDone.\n\n\nNow let’s plot the three quarter’s G-values side-by-side.\n\npar(mfrow = c(1,3))\nplot(G_mm_23_Q2.csr)\nplot(G_mm_23_Q3.csr)\nplot(G_mm_23_Q4.csr)\n\n\n\n\n\n\n\n\nAs expected, we do see more clustering in Q3 in the range of &lt;500m, but Q2 and Q4 are generally around the same. Given the increase in the number of attacks across the three quarters, we could attribute Q4 to be an increase in the number of attacks instead, thus having the same relative G-value despite the KDE layer suggesting more dispersal."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-layers",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-layers",
    "title": "Take-Home Exercise 1",
    "section": "Computing Spatio-Temporal KDE Layers",
    "text": "Computing Spatio-Temporal KDE Layers\nNow let us look at the 5 event types individually for our Spatio-Temporal KDE.\n\nProtests\nFirst, I shall filter them into individual years, then sort them by their quarters then convert them into ppp objects. This is to allow a ease of calculating the STKDE using spattemp.density(). To ensure that the objects are created correctly, I will print the summary for the 2021 data.\n\nprotest_21_sf = protests_sf %&gt;% filter(event_year == 2021) %&gt;% dplyr::select(event_quarter)\nprotest_22_sf = protests_sf %&gt;% filter(event_year == 2022) %&gt;% dplyr::select(event_quarter)\nprotest_23_sf = protests_sf %&gt;% filter(event_year == 2023) %&gt;% dplyr::select(event_quarter)\nprotest_24_sf = protests_sf %&gt;% filter(event_year == 2024) %&gt;% dplyr::select(event_quarter)\nprotest_21_ppp = as.ppp(protest_21_sf)\nprotest_22_ppp = as.ppp(protest_22_sf)\nprotest_23_ppp = as.ppp(protest_23_sf)\nprotest_24_ppp = as.ppp(protest_24_sf)\nsummary(protest_21_ppp)\n\nMarked planar point pattern:  5934 points\nAverage intensity 4.188551e-09 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   2.000   1.826   2.000   4.000 \n\nWindow: rectangle = [-138595, 591875.9] x [1103500.1, 3042960.3] units\n                    (730500 x 1939000 units)\nWindow area = 1.41672e+12 square units\n\n\nNow, I will attach the boundary data to the ppp objects, and calculate the STKDE.\n\nprotest_21_owin = protest_21_ppp[mimu_sub_owin]\nprotest_22_owin = protest_22_ppp[mimu_sub_owin]\nprotest_23_owin = protest_23_ppp[mimu_sub_owin]\nprotest_24_owin = protest_24_ppp[mimu_sub_owin]\n\nprotest_21_st_kde= spattemp.density(protest_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nprotest_22_st_kde= spattemp.density(protest_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nprotest_23_st_kde= spattemp.density(protest_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nprotest_24_st_kde= spattemp.density(protest_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(protest_21_st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 59999.26 (spatial)\n  lambda = 0.0015 (temporal)\n\nNo. of observations\n  5934 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [8.455845e-22, 3.141563e-09]\n\n\nFinally, I shall plot out the individual quarters. I will utilise for-loops to print out the STKDE layers individually so that I can accurately label each layer.\n\npar(mfrow = c(4,4))\nfor(i in c(1,2,3,4)){\n  plot(protest_21_st_kde, i, override.par = FALSE, main = paste(\"2021 - Q\", i))\n}\nfor(i in c(1,2,3,4)){\n  plot(protest_22_st_kde, i, override.par = FALSE, main = paste(\"2022 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(protest_23_st_kde, i, override.par = FALSE, main = paste(\"2023 - Q\", i))\n} \nfor(i in c(1,2)){\n  plot(protest_24_st_kde, i, override.par = FALSE, main = paste(\"2024 - Q\", i))\n}\n\n\n\n\n\n\n\n\nNow, I shall repeat the process for the remaining 4 event types.\n\n\nBattles\n\nbattle_21_sf = battles_sf %&gt;% filter(event_year == 2021) %&gt;% dplyr::select(event_quarter)\nbattle_22_sf = battles_sf %&gt;% filter(event_year == 2022) %&gt;% dplyr::select(event_quarter)\nbattle_23_sf = battles_sf %&gt;% filter(event_year == 2023) %&gt;% dplyr::select(event_quarter)\nbattle_24_sf = battles_sf %&gt;% filter(event_year == 2024) %&gt;% dplyr::select(event_quarter)\nbattle_21_ppp = as.ppp(battle_21_sf)\nbattle_22_ppp = as.ppp(battle_22_sf)\nbattle_23_ppp = as.ppp(battle_23_sf)\nbattle_24_ppp = as.ppp(battle_24_sf)\nsummary(battle_21_ppp)\n\nMarked planar point pattern:  2234 points\nAverage intensity 1.665261e-09 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   2.957   4.000   4.000 \n\nWindow: rectangle = [-203795.3, 591875.9] x [1340466.9, 3026504.9] units\n                    (795700 x 1686000 units)\nWindow area = 1.34153e+12 square units\n\n\n\nbattle_21_owin = battle_21_ppp[mimu_sub_owin]\nbattle_22_owin = battle_22_ppp[mimu_sub_owin]\nbattle_23_owin = battle_23_ppp[mimu_sub_owin]\nbattle_24_owin = battle_24_ppp[mimu_sub_owin]\n\nbattle_21_st_kde= spattemp.density(battle_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nbattle_22_st_kde= spattemp.density(battle_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nbattle_23_st_kde= spattemp.density(battle_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nbattle_24_st_kde= spattemp.density(battle_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(battle_21_st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 69239.08 (spatial)\n  lambda = 0.0044 (temporal)\n\nNo. of observations\n  2234 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [1.090743e-20, 4.67676e-10]\n\n\n\npar(mfrow = c(4,4))\nfor(i in c(1,2,3,4)){\n  plot(battle_21_st_kde, i, override.par = FALSE, main = paste(\"2021 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(battle_22_st_kde, i, override.par = FALSE, main = paste(\"2022 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(battle_23_st_kde, i, override.par = FALSE, main = paste(\"2023 - Q\", i))\n} \nfor(i in c(1,2)){\n  plot(battle_24_st_kde, i, override.par = FALSE, main = paste(\"2024 - Q\", i))\n}\n\n\n\n\n\n\n\n\n\n\nStrategic Developments\n\ndevelop_21_sf = develop_sf %&gt;% filter(event_year == 2021) %&gt;% dplyr::select(event_quarter)\ndevelop_22_sf = develop_sf %&gt;% filter(event_year == 2022) %&gt;% dplyr::select(event_quarter)\ndevelop_23_sf = develop_sf %&gt;% filter(event_year == 2023) %&gt;% dplyr::select(event_quarter)\ndevelop_24_sf = develop_sf %&gt;% filter(event_year == 2024) %&gt;% dplyr::select(event_quarter)\ndevelop_21_ppp = as.ppp(develop_21_sf)\ndevelop_22_ppp = as.ppp(develop_22_sf)\ndevelop_23_ppp = as.ppp(develop_23_sf)\ndevelop_24_ppp = as.ppp(develop_24_sf)\nsummary(develop_21_ppp)\n\nMarked planar point pattern:  3411 points\nAverage intensity 2.225079e-09 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   2.824   4.000   4.000 \n\nWindow: rectangle = [-198539.5, 591875.9] x [1103500.1, 3042960.3] units\n                    (790400 x 1939000 units)\nWindow area = 1.53298e+12 square units\n\n\n\ndevelop_21_owin = develop_21_ppp[mimu_sub_owin]\ndevelop_22_owin = develop_22_ppp[mimu_sub_owin]\ndevelop_23_owin = develop_23_ppp[mimu_sub_owin]\ndevelop_24_owin = develop_24_ppp[mimu_sub_owin]\n\ndevelop_21_st_kde= spattemp.density(develop_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ndevelop_22_st_kde= spattemp.density(develop_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ndevelop_23_st_kde= spattemp.density(develop_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\ndevelop_24_st_kde= spattemp.density(develop_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(develop_21_st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 64153.61 (spatial)\n  lambda = 0.0037 (temporal)\n\nNo. of observations\n  3411 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [9.667345e-15, 5.292478e-10]\n\n\n\npar(mfrow = c(4,4))\nfor(i in c(1,2,3,4)){\n  plot(develop_21_st_kde, i, override.par = FALSE, main = paste(\"2021 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(develop_22_st_kde, i, override.par = FALSE, main = paste(\"2022 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(develop_23_st_kde, i, override.par = FALSE, main = paste(\"2023 - Q\", i))\n} \nfor(i in c(1,2)){\n  plot(develop_24_st_kde, i, override.par = FALSE, main = paste(\"2024 - Q\", i))\n}\n\n\n\n\n\n\n\n\n\n\nViolence against civilians\n\nviolence_21_sf = violence_sf %&gt;% filter(event_year == 2021) %&gt;% dplyr::select(event_quarter)\nviolence_22_sf = violence_sf %&gt;% filter(event_year == 2022) %&gt;% dplyr::select(event_quarter)\nviolence_23_sf = violence_sf %&gt;% filter(event_year == 2023) %&gt;% dplyr::select(event_quarter)\nviolence_24_sf = violence_sf %&gt;% filter(event_year == 2024) %&gt;% dplyr::select(event_quarter)\nviolence_21_ppp = as.ppp(violence_21_sf)\nviolence_22_ppp = as.ppp(violence_22_sf)\nviolence_23_ppp = as.ppp(violence_23_sf)\nviolence_24_ppp = as.ppp(violence_24_sf)\nsummary(violence_21_ppp)\n\nMarked planar point pattern:  1877 points\nAverage intensity 1.254296e-09 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   2.968   4.000   4.000 \n\nWindow: rectangle = [-191409.1, 591875.9] x [1132472.1, 3042960.3] units\n                    (783300 x 1910000 units)\nWindow area = 1.49646e+12 square units\n\n\n\nviolence_21_owin = violence_21_ppp[mimu_sub_owin]\nviolence_22_owin = violence_22_ppp[mimu_sub_owin]\nviolence_23_owin = violence_23_ppp[mimu_sub_owin]\nviolence_24_owin = violence_24_ppp[mimu_sub_owin]\n\nviolence_21_st_kde= spattemp.density(violence_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nviolence_22_st_kde= spattemp.density(violence_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nviolence_23_st_kde= spattemp.density(violence_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nviolence_24_st_kde= spattemp.density(violence_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(violence_21_st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 68873.22 (spatial)\n  lambda = 0.0052 (temporal)\n\nNo. of observations\n  1876 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [2.295996e-17, 4.505932e-10]\n\n\n\npar(mfrow = c(4,4))\nfor(i in c(1,2,3,4)){\n  plot(violence_21_st_kde, i, override.par = FALSE, main = paste(\"2021 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(violence_22_st_kde, i, override.par = FALSE, main = paste(\"2022 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(violence_23_st_kde, i, override.par = FALSE, main = paste(\"2023 - Q\", i))\n} \nfor(i in c(1,2)){\n  plot(violence_24_st_kde, i, override.par = FALSE, main = paste(\"2024 - Q\", i))\n}\n\n\n\n\n\n\n\n\n\n\nExplosions/Remote Violence\n\nexplosions_21_sf = explosions_sf %&gt;% filter(event_year == 2021) %&gt;% dplyr::select(event_quarter)\nexplosions_22_sf = explosions_sf %&gt;% filter(event_year == 2022) %&gt;% dplyr::select(event_quarter)\nexplosions_23_sf = explosions_sf %&gt;% filter(event_year == 2023) %&gt;% dplyr::select(event_quarter)\nexplosions_24_sf = explosions_sf %&gt;% filter(event_year == 2024) %&gt;% dplyr::select(event_quarter)\nexplosions_21_ppp = as.ppp(explosions_21_sf)\nexplosions_22_ppp = as.ppp(explosions_22_sf)\nexplosions_23_ppp = as.ppp(explosions_23_sf)\nexplosions_24_ppp = as.ppp(explosions_24_sf)\nsummary(explosions_21_ppp)\n\nMarked planar point pattern:  2704 points\nAverage intensity 1.918481e-09 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   3.097   4.000   4.000 \n\nWindow: rectangle = [-201788.2, 640934.5] x [1354010.7, 3026504.9] units\n                    (842700 x 1672000 units)\nWindow area = 1.40945e+12 square units\n\n\n\nexplosions_21_owin = explosions_21_ppp[mimu_sub_owin]\nexplosions_22_owin = explosions_22_ppp[mimu_sub_owin]\nexplosions_23_owin = explosions_23_ppp[mimu_sub_owin]\nexplosions_24_owin = explosions_24_ppp[mimu_sub_owin]\n\nexplosions_21_st_kde= spattemp.density(explosions_21_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nexplosions_22_st_kde= spattemp.density(explosions_22_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nexplosions_23_st_kde= spattemp.density(explosions_23_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nexplosions_24_st_kde= spattemp.density(explosions_24_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(explosions_21_st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 64684.59 (spatial)\n  lambda = 0.0033 (temporal)\n\nNo. of observations\n  2704 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [2.09422e-34, 1.138173e-09]\n\n\n\npar(mfrow = c(4,4))\nfor(i in c(1,2,3,4)){\n  plot(explosions_21_st_kde, i, override.par = FALSE, main = paste(\"2021 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(explosions_22_st_kde, i, override.par = FALSE, main = paste(\"2022 - Q\", i))\n} \nfor(i in c(1,2,3,4)){\n  plot(explosions_23_st_kde, i, override.par = FALSE, main = paste(\"2023 - Q\", i))\n} \nfor(i in c(1,2)){\n  plot(explosions_24_st_kde, i, override.par = FALSE, main = paste(\"2024 - Q\", i))\n}"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatio-temporal-point-pattern-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nd-order-spatio-temporal-point-pattern-analysis",
    "title": "Take-Home Exercise 1",
    "section": "2nd Order Spatio-Temporal Point Pattern Analysis",
    "text": "2nd Order Spatio-Temporal Point Pattern Analysis\nBased on the 5 event types’ Spatio-Temporal KDE layers, we can see a growing trend in Violence and Protests, while surprisingly a downwards trend for Battles, Strategic Developments and Explosions/Remote Violence. However, it is crucial to know if there is an actual decline in these three downwards trends, as it could be attributed to simply dispersal of events. We shall use G-Function to analyse this by comparing the 2024 Q2 results with the results from 2023 Q2, to see if over a year there is less clustering and overall less events occurring.\n\nacled_sf %&gt;% filter(event_year == 2023, event_quarter == 2) %&gt;% count(event_type, sort = TRUE)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -191261.5 ymin: 1103500 xmax: 518300.4 ymax: 3006373\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 5 × 3\n  event_type                     n                                      geometry\n* &lt;chr&gt;                      &lt;int&gt;                              &lt;MULTIPOINT [m]&gt;\n1 Battles                      814 ((-174035.7 2284958), (-152179.1 2277258), (…\n2 Explosions/Remote violence   814 ((-191261.5 2351144), (-93596.16 2398133), (…\n3 Strategic developments       716 ((-187696.5 2324700), (-174344.6 2321971), (…\n4 Violence against civilians   401 ((-138595 2239402), (-120600.4 2242432), (-7…\n5 Protests                     176 ((275.0944 2569257), (21114.28 2358755), (70…\n\n\n\nacled_sf %&gt;% filter(event_year == 2024, event_quarter == 2) %&gt;% count(event_type, sort = TRUE)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 597543.7 ymax: 3026505\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 5 × 3\n  event_type                     n                                      geometry\n* &lt;chr&gt;                      &lt;int&gt;                              &lt;MULTIPOINT [m]&gt;\n1 Explosions/Remote violence  1000 ((-208804.4 2357274), (-201925.4 2354103), (…\n2 Battles                      960 ((-201925.4 2354103), (-199243.8 2366471), (…\n3 Strategic developments       531 ((-197883.4 2339678), (-197577 2330794), (-1…\n4 Violence against civilians   297 ((-201925.4 2354103), (-197577 2330794), (-1…\n5 Protests                      42 ((-174344.6 2321971), (-138595 2239402), (-7…\n\n\nBased on the count, we can observe the difference in the number of events for each of our 3 categories. Explosions/Remote Violence and Battles increased, while Strategic Developments saw a decrease. With this in mind, lets look at their G-function results. I shall filter out the relevant year and quarter for the 3 events, and convert them into ppp objects.\n\nbattle_ppp_23_Q2 = battles_sf %&gt;% filter(event_year == 2023, event_quarter == 2) %&gt;% as.ppp()\n\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n\nbattle_ppp_24_Q2 = battles_sf %&gt;% filter(event_year == 2024, event_quarter == 2) %&gt;% as.ppp()\n\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n\ndevelop_ppp_23_Q2 = develop_sf %&gt;% filter(event_year == 2023, event_quarter == 2) %&gt;% as.ppp()\n\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n\ndevelop_ppp_24_Q2 = develop_sf %&gt;% filter(event_year == 2024, event_quarter == 2) %&gt;% as.ppp()\n\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n\nexplosions_ppp_23_Q2 = explosions_sf %&gt;% filter(event_year == 2023, event_quarter == 2) %&gt;% as.ppp()\n\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n\nexplosions_ppp_24_Q2 = explosions_sf %&gt;% filter(event_year == 2024, event_quarter == 2) %&gt;% as.ppp()\n\nWarning in as.ppp.sf(.): only first attribute column is used for marks\n\n\nNow, I shall attach the boundary data to the ppp objects.\n\nbattle_ppp_23_Q2 = battle_ppp_23_Q2[mimu_sub_owin]\nbattle_ppp_24_Q2 = battle_ppp_24_Q2[mimu_sub_owin]\n\ndevelop_ppp_23_Q2 = develop_ppp_23_Q2[mimu_sub_owin]\ndevelop_ppp_24_Q2 = develop_ppp_24_Q2[mimu_sub_owin]\n\nexplosions_ppp_23_Q2 = explosions_ppp_23_Q2[mimu_sub_owin]\nexplosions_ppp_24_Q2 = explosions_ppp_24_Q2[mimu_sub_owin]\n\nFinally, lets calculate and plot out the G-function results.\n\nbattle_G_23_Q2.csr = envelope(battle_ppp_23_Q2, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nbattle_G_24_Q2.csr = envelope(battle_ppp_24_Q2, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\ndevelop_G_23_Q2.csr = envelope(develop_ppp_23_Q2, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\ndevelop_G_24_Q2.csr = envelope(develop_ppp_24_Q2, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nexplosions_G_23_Q2.csr = envelope(explosions_ppp_23_Q2, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nexplosions_G_24_Q2.csr = envelope(explosions_ppp_24_Q2, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\npar(mfrow = c(3,2))\nplot(battle_G_23_Q2.csr)\nplot(battle_G_24_Q2.csr)\n\nplot(develop_G_23_Q2.csr)\nplot(develop_G_24_Q2.csr)\n\nplot(explosions_G_23_Q2.csr)\nplot(explosions_G_24_Q2.csr)\n\n\n\n\n\n\n\n\nFor Strategic Developments and Explosions/Remote Violence, we do see slightly less clustering, especially &lt;500m. This aligns with our hypothesis that events are more dispersed across Myanmar, however, not by much. The surprise was the increase in clustering witnessed for Battles. This shows that there is both an increase in the number of events while still being highly concentrated around specific areas."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#plotting-on-openstreetmap",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#plotting-on-openstreetmap",
    "title": "Take-Home Exercise 1",
    "section": "Plotting on OpenStreetMap",
    "text": "Plotting on OpenStreetMap\nI have attempted to plot the data onto OpenStreetMap. I convert the KDE data into raster and project it using the EPSG code 32647.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\nkde_mm_24_Q2_CvL_raster = raster(kde_mm_24_Q2.CvL)\nprojection(kde_mm_24_Q2_CvL_raster) = CRS(\"+init=EPSG:32647\")\ntm_basemap(leaflet::providers$OpenStreetMap) +\n  tm_shape(kde_mm_24_Q2_CvL_raster) +\n  tm_raster(\"layer\") \n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nI am unsure why the coordinates are not matching."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#observations",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#observations",
    "title": "Take-Home Exercise 1",
    "section": "Observations",
    "text": "Observations\nFirstly, we can come to the conclusion that majority of the fight occurs in the northern and southern part of Myanmar. However, one thing interesting is the lack of events occurring near the center. Ann San Suu Kyi was arrested and kept in Nay Pyi Taw (Maizland, 2021), the capital of Myanmar, where she seems to have remained after moving from prison to house arrest in 2024 (Ratcliffe, 2024).\n\n\n\nA Map of Myanmar, taken from Council on Foreign Relations (CFR)\n\n\nYet the fighting seems to be away from this particular city. Usually we would expect demonstrations to occur near the parliament of the country, and given that Suu Kyi was arrested there, it would make sense for resistance forces to attempt to pressure the government by creating havoc near the official’s buildings. However, there could be a reason for this, and this is highlighted from 2024 Q2.\n\npar(mfrow = c(2,2))\nplot(kde_mm_24_Q2.CvL)\nplot(violence_24_st_kde, 2, override.par = FALSE, main = paste(\"2024 - Q\", i))\nplot(explosions_24_st_kde, 2, override.par = FALSE, main = paste(\"2024 - Q\", i))\nplot(battle_24_st_kde, 2, override.par = FALSE, main = paste(\"2024 - Q\", i))\n\n\n\n\n\n\n\n\n\n\n\nA map of Myanmar highlighting the military and militias presence, taken from The Economist\n\n\nThere is a clear correlation between the presence of the Militias, Myanmar’s multiple civil resistance groups, and the presence of events, particularly violent events such as explosions, battles and violence against civilians. The presence of these events suggests violent fighting within these areas.\nFurthermore, the opposition has expanded and gained ground since late 2023 (The Economist, 2024). This would also suggest why we see the spread coverage despite the non-reduction in the number of events.\n\nSo what can we hope for Myanmar in the future?\nWe do see an upward trend of fighting, and its unlikely that it will end anytime soon. However, we do see some silver lining.\nThe increased spread in fighting, while bad, does signal that the military, Junta, is spread thin more than ever, and that the resistance does seem to be gaining ground. As Mr Dustin Barter, a senior research fellow at Global Affairs Think Tank ODI, told Channel News Asia (CNA), “In the past few months, there has been a lot of gains by the revolution and the resistance. There is optimism and hope that the military can be ousted.” (Leong & Ng, 2024)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#references",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#references",
    "title": "Take-Home Exercise 1",
    "section": "References",
    "text": "References\nFarge, E., & Mantovani, C. (2024, September 17). Myanmar Military stepping up civilian killings and arrests, says UN report. Reuters. https://www.reuters.com/world/asia-pacific/myanmar-military-intensifies-civilian-killings-arrests-says-un-report-2024-09-17/\nMaizland, L. (2022, January 31). Myanmar’s Troubled History: Coups, Military Rule, and Ethnic Conflict. Council on Foreign Relations. https://www.cfr.org/backgrounder/myanmar-history-coup-military-rule-ethnic-conflict-rohingya\nLeong, W. K., & Ng, D. (2024, February 1). CNA Explains: What’s happened since Myanmar’s coup 3 years ago? Channel News Asia. https://www.channelnewsasia.com/asia/myanmar-coup-3-years-anniversary-cna-explains-timeline-junta-4091861\nRatcliffe, R. (2024, April 17). Aung San Suu Kyi, Myanmar’s jailed former leader, moved to house arrest, says junta. The Guardian. https://www.theguardian.com/world/2024/apr/17/aung-san-suu-kyi-myanmar-jailed-former-leader-moved-to-house-arrest-says-junta\nThe Economist. (2024, May 16). The military dictatorship controls less than 50% of Myanmar. https://www.economist.com/asia/2024/05/16/the-military-dictatorship-controls-less-than-50-of-myanmar"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html",
    "title": "In-Class Exercise 6",
    "section": "",
    "text": "Learning about Global and Local measures of Spatial Autocorrelation in R.\n\n\n23 Sep 24: Completed In-Class Exercise 6."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#description",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#description",
    "title": "In-Class Exercise 6",
    "section": "",
    "text": "Learning about Global and Local measures of Spatial Autocorrelation in R.\n\n\n23 Sep 24: Completed In-Class Exercise 6."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#importing-data-and-packages",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#importing-data-and-packages",
    "title": "In-Class Exercise 6",
    "section": "Importing Data and Packages",
    "text": "Importing Data and Packages\n\npacman::p_load(sf, sfdep, tmap, tidyverse)\n\n\nhunan_sf = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan_2012 = read.csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nhunan_GDPPC = left_join(hunan_sf, hunan_2012) %&gt;% select(1:4, 6, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#global-measures-of-spatial-associatoin",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#global-measures-of-spatial-associatoin",
    "title": "In-Class Exercise 6",
    "section": "Global Measures of Spatial Associatoin",
    "text": "Global Measures of Spatial Associatoin\n\nwm_q = hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry), \n         wt = st_weights(nb, style = \"W\"), \n         .before = 1)\n\nnb is the neighbour list created by st_neighbours(). Style “W” is for row-standardised weights. The “.before = 1” is to append the new columns in the front instead of the back.\n\nmoranI = global_moran(wm_q$GDPPC,\n                      wm_q$nb,\n                      wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nFor permutation, we need to make it reproducible by setting a seed.\n\nset.seed(1234)\n\n\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 999)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#local-measures",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html#local-measures",
    "title": "In-Class Exercise 6",
    "section": "Local Measures",
    "text": "Local Measures\n\nlisa = wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 999\n  ), .before = 1) %&gt;%\n  unnest(local_moran) #This is needed to see the output in table form\n\nNotes on the output:\n\nThere are 3 p-values, stay consistent on which one to use\n\nUsually use p-sim\n\nThere are 3 hot-cold columns, but focus on: mean and median\n\nDetermine which to use by the skewness. If skewness is closer to 0, then can use mean, else use median\nDetermine skewness through all rows: if majority are far away from 0, then use median.\nPerhaps using a histogram to plot it would be good to visualise the overall skewness.\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 = tm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 1) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of GDPPC\")\n\nmap2 = tm_shape(lisa)+\n  tm_fill(\"p_ii\", \n          breaks = c(0, 0.001, 0.01, 0.05, 1), \n          labels = c(\"&lt; 0.001\", \"0.01\", \"0.05\", \"Not Sig\")) +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"p-values of local Moran's I\")\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising the LISA map\n\nlisa_sig = lisa %&gt;% filter(p_ii &lt; 0.05)\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 1) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.5)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nComputing local Gi statistics\n\nwm_idw = hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nHCSA = wm_idw %&gt;%\n  mutate(local_Gi = local_gstar_perm( GDPPC, nb, wt, nsim = 999),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi    var_gi  std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0113   6.30e-6  0.0769  9.39e-1 0.786        0.393    0.890\n 2 -0.333  Low     0.0111   7.06e-6 -0.260   7.95e-1 0.954        0.477    0.916\n 3  0.281  High    0.0122   7.77e-6  0.00601 9.95e-1 0.81         0.405    1.17 \n 4  0.411  High    0.0113   7.63e-6  0.489   6.25e-1 0.558        0.279    1.00 \n 5  0.387  High    0.0116   8.72e-6  0.326   7.45e-1 0.62         0.31     1.01 \n 6 -0.368  High    0.0114   6.22e-6 -0.425   6.71e-1 0.802        0.401    0.841\n 7  3.56   High    0.0149   7.44e-6  2.67    7.57e-3 0.04         0.02     1.06 \n 8  2.52   High    0.0134   4.88e-6  1.77    7.72e-2 0.112        0.056    0.880\n 9  4.56   High    0.0142   4.97e-6  3.89    9.92e-5 0.006        0.003    0.770\n10  1.16   Low     0.0108   4.92e-6  1.39    1.63e-1 0.21         0.105    0.730\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, Shape_Area &lt;dbl&gt;, GDPPC &lt;int&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\nmap1 = tm_shape(HCSA) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 1)\nmap2 = tm_shape(HCSA) +\n  tm_fill(\"p_sim\", \n          breaks = c(0, 0.001, 0.01, 0.05, 1), \n          labels = c(\"&lt; 0.001\", \"0.01\", \"0.05\", \"Not Sig\")) +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"p-values\")\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\nHCSA_sig = HCSA %&gt;% filter(p_sim &lt; 0.05)\ntm_shape(HCSA) +\n  tm_polygons()+\n  tm_borders(alpha = 1) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.5)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]