---
title: "Hands-on Exercise 1"
author: "Dexter Wan"
date: "August 14, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## Description

Learning to import data, displaying and modifying shapefiles in R.

### Changelog

19 Aug 24: Completed Hands-on Exercise 2

26 Aug 24: Updated the description and added a changelog.

## Importing Geospatial Data

Load *sf* and *tidyverse* packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

Import geospatial data into R environment:

```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## Checking the Content of a Simple Feature Data Frame

Using *st_geometry* to display the geometry list-column:

```{r}
st_geometry(mpsz)
```

Using *glimpse* to show a few entries and the data type of each field:

```{r}
glimpse(mpsz)
```

Using *head* to reveal complete information of the data frame, limiting to 5 records:

```{r}
head(mpsz, n=5)
```

## Plotting Geospatial Data

Plotting all data of the "Master Plan 2014":

```{r}
plot(mpsz)
```

Plotting only the geometry:

```{r}
plot(st_geometry(mpsz))
```

Plotting only "*PLN_AREA_N"*:

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Working with Projection

### Assigning EPSG code

Showing the coordinate reference system (*crs*) of the "Master Plan 2014":

```{r}
st_crs(mpsz)
```

Reassigning the EPSG code to 3414:

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

### Transform projection (from wgs84 to svy21)

Using *st_transform* to transform preschool crs to 3414:

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
st_geometry(preschool3414)
```

## Importing and Converting Aspatial Data

Import and list aspatial data from csv file:

```{r}
listings <- read_csv("data/aspatial/listings.csv")
list(listings)
```

Creating a simple feature data frame from *listings*:

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude","latitude"), crs=4326) %>%
  st_transform(crs=3414)

glimpse(listings_sf)
```

## Geoprocessing with sf package

### Buffering

**The scenario**: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

**The scenario**: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

Identify pre-schools located in each planning subzone using *st_intersects* and *length* to get the number of pre-schools in each subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
```

Use *top_n* to list the planning zone with most number of pre-schools.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Use *st_area* to get the area of each planning subzone, then use *mutate* to calculate the density of pre-schools in each subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area*1000000)
```

## Exploratory Data Analysis (EDA)

### Histogram

```{r}
hist(mpsz3414$`PreSch Density`)
```

### Histogram with better visualisation

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

### Scatterplot

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
