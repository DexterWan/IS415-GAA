{
  "hash": "a3d05e3ae19b74fba07a9ee340240b83",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 6\"\nauthor: \"Dexter Wan\"\ndate: \"September 23, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## Description\n\nLearning about Global and Local measures of Spatial Autocorrelation in R.\n\n### Changelog\n\n23 Sep 24: Completed In-Class Exercise 6.\n\n## Importing Data and Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\0SMU\\IS415-GAA\\In-Class_Ex\\In-Class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nhunan_2012 = read.csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_GDPPC = left_join(hunan_sf, hunan_2012) %>% select(1:4, 6, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n:::\n\n\n## Global Measures of Spatial Associatoin\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q = hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry), \n         wt = st_weights(nb, style = \"W\"), \n         .before = 1)\n```\n:::\n\n\nnb is the neighbour list created by *st_neighbours().* Style \"W\" is for row-standardised weights. The \".before = 1\" is to append the new columns in the front instead of the back.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI = global_moran(wm_q$GDPPC,\n                      wm_q$nb,\n                      wm_q$wt)\nglimpse(moranI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n\n\n:::\n:::\n\n\nFor permutation, we need to make it reproducible by setting a seed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n## Local Measures\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa = wm_q %>%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 999\n  ), .before = 1) %>%\n  unnest(local_moran) #This is needed to see the output in table form\n```\n:::\n\n\nNotes on the output:\n\n-   There are 3 p-values, stay consistent on which one to use\n\n    -   Usually use p-sim\n\n-   There are 3 hot-cold columns, but focus on: mean and median\n\n    -   Determine which to use by the skewness. If skewness is closer to 0, then can use mean, else use median\n\n    -   Determine skewness through all rows: if majority are far away from 0, then use median.\n\n    -   Perhaps using a histogram to plot it would be good to visualise the overall skewness.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nmap1 = tm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 1) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of GDPPC\")\n\nmap2 = tm_shape(lisa)+\n  tm_fill(\"p_ii\", \n          breaks = c(0, 0.001, 0.01, 0.05, 1), \n          labels = c(\"< 0.001\", \"0.01\", \"0.05\", \"Not Sig\")) +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"p-values of local Moran's I\")\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-Class_Ex06_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\nVisualising the LISA map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig = lisa %>% filter(p_ii < 0.05)\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 1) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-Class_Ex06_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nComputing local Gi statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw = hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA = wm_idw %>%\n  mutate(local_Gi = local_gstar_perm( GDPPC, nb, wt, nsim = 999),\n         .before = 1) %>%\n  unnest(local_Gi)\nHCSA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi    var_gi  std_dev p_value p_sim p_folded_sim skewness\n     <dbl> <fct>    <dbl>     <dbl>    <dbl>   <dbl> <dbl>        <dbl>    <dbl>\n 1  0.0416 Low     0.0113   6.30e-6  0.0769  9.39e-1 0.786        0.393    0.890\n 2 -0.333  Low     0.0111   7.06e-6 -0.260   7.95e-1 0.954        0.477    0.916\n 3  0.281  High    0.0122   7.77e-6  0.00601 9.95e-1 0.81         0.405    1.17 \n 4  0.411  High    0.0113   7.63e-6  0.489   6.25e-1 0.558        0.279    1.00 \n 5  0.387  High    0.0116   8.72e-6  0.326   7.45e-1 0.62         0.31     1.01 \n 6 -0.368  High    0.0114   6.22e-6 -0.425   6.71e-1 0.802        0.401    0.841\n 7  3.56   High    0.0149   7.44e-6  2.67    7.57e-3 0.04         0.02     1.06 \n 8  2.52   High    0.0134   4.88e-6  1.77    7.72e-2 0.112        0.056    0.880\n 9  4.56   High    0.0142   4.97e-6  3.89    9.92e-5 0.006        0.003    0.770\n10  1.16   Low     0.0108   4.92e-6  1.39    1.63e-1 0.21         0.105    0.730\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis <dbl>, nb <nb>, wts <list>, NAME_2 <chr>,\n#   ID_3 <int>, NAME_3 <chr>, ENGTYPE_3 <chr>, Shape_Area <dbl>, GDPPC <int>,\n#   geometry <POLYGON [°]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap1 = tm_shape(HCSA) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 1)\nmap2 = tm_shape(HCSA) +\n  tm_fill(\"p_sim\", \n          breaks = c(0, 0.001, 0.01, 0.05, 1), \n          labels = c(\"< 0.001\", \"0.01\", \"0.05\", \"Not Sig\")) +\n  tm_borders(alpha = 1) +\n  tm_layout(main.title = \"p-values\")\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-Class_Ex06_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig = HCSA %>% filter(p_sim < 0.05)\ntm_shape(HCSA) +\n  tm_polygons()+\n  tm_borders(alpha = 1) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](In-Class_Ex06_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-Class_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}