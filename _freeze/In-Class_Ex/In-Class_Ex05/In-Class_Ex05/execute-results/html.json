{
  "hash": "7f2480ff0fbd87df62464859e627edda",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 5\"\nauthor: \"Dexter Wan\"\ndate: \"September 16, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## Description\n\nLearning to perform Spatial Weight and its Applications in R.\n\n### Changelog\n\n16 Sep 24: Completed In-Class Exercise 5.\n\n## Importing Data and Packages\n\nImport Packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n```\n:::\n\n\nImport data and join them, selecting only relevant fields:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ^ To prevent from re-load during render\nhunan_sf = st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\nhunan_2012 = read.csv(\"data/aspatial/HUnan_2012.csv\")\nhunan_sf = left_join(hunan_sf, hunan_2012) %>%\n  select(1:3, 7, 15:16, 31, 32)\n```\n:::\n\n\nWrite into rds format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n```\n:::\n\n\nRead rds into R environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf = read_rds(\"data/rds/hunan_sf.rds\") \n```\n:::\n\n\nConvert into Spatial Polygon Data Frame, as GWmodel is built around sp:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp = hunan_sf %>% as_Spatial()\n```\n:::\n\n\n## Geographically Weighted Summary Statistics with Adaptive Bandwidth\n\nDetermine adaptive bandwidth:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Cross-validation \nbw_CV = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,  #enable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T  #set to TRUE, transforms data to projected CRS in KM\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n\n```{.r .cell-code}\n#AIC\nbw_AIC = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE,  #enable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T  #set to TRUE, transforms data to projected CRS in KM\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n\nFixed Bandwidth:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Cross-validation \nbw_CV_Fix = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,  #disable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n\n```{.r .cell-code}\n#AIC\nbw_AIC_Fix = bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,  #disable adaptive bandwidth\n                kernel = \"bisquare\",\n                longlat = T\n                )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n\nCompute geographically weighted summary statistics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat = gwss(data = hunan_sp,\n              vars = \"GDPPC\",\n              bw = bw_AIC,\n              kernel = \"bisquare\",\n              adaptive = TRUE,\n              longlat = T\n              )\n```\n:::\n\n\nPrepare the output data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df = as.data.frame(gwstat$SDF)\n#Append data to original sf file\nhunan_gstat = cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\nVisualising the stats:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\", n = 5, style = \"quantile\") +\n  tm_borders(alpha = 1)+\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            legend.title.size = 1.2,\n            legend.height = 1.5,\n            legend.width = 1.5,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex05_files/figure-html/unnamed-chunk-10-1.png){width=1056}\n:::\n:::\n",
    "supporting": [
      "In-Class_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}