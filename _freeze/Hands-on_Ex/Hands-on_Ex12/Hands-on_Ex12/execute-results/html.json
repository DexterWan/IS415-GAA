{
  "hash": "c4968b8d377ec1395321ad2341ee8a53",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 12\"\nauthor: \"Dexter Wan\"\ndate: \"November 7, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n## Description\n\nLearning about Geographically Weighted Predictive Models in R.\n\n### Changelog\n\n7 Nov 24: Completed Hands-on Exercise 12\n\n## Importing Data and setting up R Environment\n\nFirst I will load the relevant packages needed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, SpatialML, tmap, rsample, Metrics, tidyverse)\n```\n:::\n\n\n\nNow I will import the geospatial data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata = read_rds(\"data/model/mdata.rds\")\n```\n:::\n\n\n\nThe data can be split into training and testing data sets using 65% and 35% respectively. The split can be done with *initial_split().*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split = initial_split(mdata, prop = 6.5/10)\n\ntrain_data = training(resale_split)\ntest_data = testing(resale_split)\n\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")\n```\n:::\n\n\n\n### Computing Correlation Matrix\n\nWe should use a correlation matrix to examine signs of multicolinearity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo = mdata %>% st_drop_geometry()\ncorrplot::corrplot(cor(mdata_nogeo[, 2:17]),\n                   diag = FALSE,\n                   order = \"AOE\",\n                   tl.pos = \"td\",\n                   tl.cex = 0.5,\n                   method = \"number\",\n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex12_files/figure-html/unnamed-chunk-4-1.png){width=1152}\n:::\n:::\n\n\n\nAll values of correlation are \\<0.8, as such we can determine that there is no sign of multicolinearity.\n\n## Building a non-spatial multiple linear regression\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr = lm(resale_price ~ floor_area_sqm + storey_order + \n                 remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n                 PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n                 PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                 WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n               data = train_data)\nsummary(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              107601.073  10601.261  10.150  < 2e-16 ***\nfloor_area_sqm             2780.698     90.579  30.699  < 2e-16 ***\nstorey_order              14299.298    339.115  42.167  < 2e-16 ***\nremaining_lease_mths        344.490      4.592  75.027  < 2e-16 ***\nPROX_CBD                 -16930.196    201.254 -84.124  < 2e-16 ***\nPROX_ELDERLYCARE         -14441.025    994.867 -14.516  < 2e-16 ***\nPROX_HAWKER              -19265.648   1273.597 -15.127  < 2e-16 ***\nPROX_MRT                 -32564.272   1744.232 -18.670  < 2e-16 ***\nPROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\nPROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\nPROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\nWITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  < 2e-16 ***\nWITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\nWITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61650 on 10320 degrees of freedom\nMultiple R-squared:  0.7373,\tAdjusted R-squared:  0.737 \nF-statistic:  2069 on 14 and 10320 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\")\n```\n:::\n\n\n\n## Preparing Coordinates Data\n\nExtract the coordinate data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords = st_coordinates(mdata)\ncoords_train = st_coordinates(train_data)\ncoords_test = st_coordinates(test_data)\n\nwrite_rds(coords_train, \"data/model/coords_train.rds\")\nwrite_rds(coords_test, \"data/model/coords_test.rds\")\n```\n:::\n\n\n\nDropping the geometry field:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data = train_data %>% st_drop_geometry()\n```\n:::\n\n\n\n## Calibrating Random Forest Model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf = ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +\n              PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + \n              PROX_PARK + PROX_MALL + PROX_SUPERMARKET + \n              WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + \n              WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n            data = train_data)\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       728602496 \nR squared (OOB):                  0.9495728 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf, \"data/model/rf.rds\")\n```\n:::\n\n\n\n## Calibrating Geographical Random Forest Model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive = grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                      remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                      PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n                      PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n                    dframe = train_data, \n                    bw = 55,\n                    kernel = \"adaptive\",\n                    coords = coords_train)\n\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive = read_rds(\"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\n### Predicting using test data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data = cbind(test_data, coords_test) %>% st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred = predict.grf(gwRF_adaptive, test_data,\n                        x.var.name = \"X\",\n                        y.var.name = \"Y\",\n                        local.w = 1,\n                        global.w = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_pred, \"data/model/gwRF_pred.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred_df = as.data.frame(gwRF_pred)\ntest_data_p = cbind(test_data, gwRF_pred_df)\nwrite_rds(test_data_p, \"data/model/test_data_p.rds\")\n```\n:::\n\n\n\n### Calculating Root Mean Square Error (RMSE)\n\nRMSE allows us to measure how far predicted values are from observed values. This is done using *rmse().*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_p$resale_price,\n     test_data_p$gwRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27302.9\n```\n\n\n:::\n:::\n\n\n\n### Visualising predicted values\n\nScatterplots can also be used to visualise the difference instead of RMSE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = gwRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex12_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}